# -*- coding: utf-8 -*-
"""
Created on Sun Oct 12 19:43:10 2025
@author: djabi
"""

from difflib import get_close_matches
import os
import shutil
import sqlite3
import pandas as pd
import pytesseract
import sys

# üî• CORRECTION CRITIQUE : Configuration du PYTHONPATH et Tesseract
def setup_environment():
    """Configure l'environnement Python et Tesseract"""
    
    # 1. Ajouter app/ au PYTHONPATH
    if getattr(sys, 'frozen', False):
        # Si ex√©cutable PyInstaller
        base_path = sys._MEIPASS
    else:
        # Si lanc√© depuis Python
        base_path = os.path.dirname(os.path.abspath(__file__))
    
    # Ajouter le dossier parent au path
    parent_dir = os.path.dirname(base_path)
    if parent_dir not in sys.path:
        sys.path.insert(0, parent_dir)
    
    # Ajouter le dossier app/ si pr√©sent
    app_dir = os.path.join(base_path, 'app')
    if os.path.exists(app_dir) and app_dir not in sys.path:
        sys.path.insert(0, app_dir)
    
    # 2. Configurer Tesseract
    if getattr(sys, 'frozen', False):
        # Si ex√©cutable PyInstaller
        tesseract_path = os.path.join(sys._MEIPASS, "tesseract", "tesseract.exe")
    else:
        # Si d√©veloppement
        tesseract_path = os.path.join(os.path.dirname(__file__), "tesseract", "tesseract.exe")
    
    if os.path.exists(tesseract_path):
        pytesseract.pytesseract.tesseract_cmd = tesseract_path
        print(f" Tesseract trouv√© : {tesseract_path}")
    else:
        # Tesseract n'est pas dans le dossier local, essayer le PATH syst√®me
        tesseract_system = shutil.which("tesseract")
        if tesseract_system:
            pytesseract.pytesseract.tesseract_cmd = tesseract_system
            print(f" Tesseract syst√®me trouv√© : {tesseract_system}")
        else:
            print(f" Tesseract non trouv√©. Chemin test√© : {tesseract_path}")

# Appeler la configuration au d√©marrage
setup_environment()

# üî• CORRECTION : Import conditionnel de configlittle
try:
    from configlittle import DATA_DIR, DB_PATH, TO_SCAN_DIR, SORTED_DIR, REVENUS_A_TRAITER, REVENUS_TRAITES
    from configlittle import load_config, save_config
    print(" Import configlittle r√©ussi (import direct)")
except ImportError:
    try:
        from app.configlittle import DATA_DIR, DB_PATH, TO_SCAN_DIR, SORTED_DIR, REVENUS_A_TRAITER, REVENUS_TRAITES
        from app.configlittle import load_config, save_config
        print(" Import configlittle r√©ussi (avec pr√©fixe app.)")
    except ImportError as e:
        print(f" ERREUR CRITIQUE : Impossible d'importer configlittle")
        print(f"   Erreur : {e}")
        print(f"   Dossier courant : {os.getcwd()}")
        print(f"   sys.path : {sys.path}")
        print(f"   Fichiers pr√©sents : {os.listdir('.')}")
        import streamlit as st
        st.error(f"""
         ERREUR CRITIQUE : Module configlittle introuvable
        
        **Diagnostic :**
        - Dossier courant : `{os.getcwd()}`
        - Fichiers pr√©sents : {os.listdir('.')}
        
        **Solutions :**
        1. V√©rifiez que `configlittle.py` est pr√©sent dans le m√™me dossier que l'ex√©cutable
        2. Si vous lancez depuis Spyder, v√©rifiez que vous √™tes dans le bon dossier
        3. Essayez de lancer depuis le terminal : `cd app && python gestiolittle.py`
        """)
        sys.exit(1)

# Imports normaux continuent...
from PIL import Image
import re
import streamlit as st
from datetime import datetime, date, timedelta
from dateutil import parser
import cv2
import numpy as np
from dateutil.relativedelta import relativedelta

# Import du syst√®me de mise √† jour
try:
    from auto_updater import show_update_notification, update_settings_ui, get_current_version
    UPDATER_AVAILABLE = True
except ImportError:
    try:
        from app.auto_updater import show_update_notification, update_settings_ui, get_current_version
        UPDATER_AVAILABLE = True
    except ImportError:
        UPDATER_AVAILABLE = False
        print(" Syst√®me de mise √† jour non disponible")

# Import du changelog viewer
try:
    from changelog_viewer import display_changelog_page, display_whats_new
    CHANGELOG_AVAILABLE = True
except ImportError:
    try:
        from app.changelog_viewer import display_changelog_page, display_whats_new
        CHANGELOG_AVAILABLE = True
    except ImportError:
        CHANGELOG_AVAILABLE = False
        print(" Affichage du changelog non disponible")

# ==============================
# üìÑ MODIFIER LA CONFIGURATION STREAMLIT
# ==============================

st.set_page_config(
    layout="wide",
    page_title=f"Gestion Financi√®re Little {get_current_version() if UPDATER_AVAILABLE else ''}",
    page_icon="üí∞"
)


def get_db_connection():
    """Retourne une connexion SQLite coh√©rente avec DB_PATH."""
    return sqlite3.connect(DB_PATH)

# ==============================
# üìÅ Dictionnaire des mois
# ==============================
mois_dict = {
    "janvier": "01", "f√©vrier": "02", "mars": "03", "avril": "04",
    "mai": "05", "juin": "06", "juillet": "07", "ao√ªt": "08",
    "septembre": "09", "octobre": "10", "novembre": "11", "d√©cembre": "12"
}

def numero_to_mois(num: str) -> str:
    for mois, numero in mois_dict.items():
        if numero == num:
            return mois
    return "inconnu"

# ==============================
# üß† OCR ET TRAITEMENT DE TICKET ET REVENU
# ==============================
def full_ocr(image_path: str, show_ticket: bool = False) -> str:
    """
    Effectue un OCR complet sur une image de ticket.
    Version robuste + option d‚Äôaffichage du ticket dans Streamlit.
    """
    try:
        # --- Lecture robuste du fichier image ---
        image_data = np.fromfile(image_path, dtype=np.uint8)
        image = cv2.imdecode(image_data, cv2.IMREAD_COLOR)

        if image is None:
            raise FileNotFoundError(f"Impossible de lire ou d√©coder l‚Äôimage : {image_path}")

        # --- Pr√©traitement pour OCR ---
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        gray = cv2.GaussianBlur(gray, (3, 3), 0)
        _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        pil_img = Image.fromarray(thresh)

        # --- OCR ---
        text = pytesseract.image_to_string(pil_img, lang="fra")
        text = text.replace("\x0c", "").strip()

        # --- Option : affichage dans Streamlit ---
        if show_ticket:
            with st.expander(f"üßæ Aper√ßu du ticket : {os.path.basename(image_path)}", expanded=False):
                st.image(cv2.cvtColor(image, cv2.COLOR_BGR2RGB), caption=os.path.basename(image_path))
                if text:
                    st.text_area("Texte OCR d√©tect√© :", text, height=200)
                else:
                    st.warning("‚ö†Ô∏è Aucun texte d√©tect√© par l‚ÄôOCR.")

        return text

    except Exception as e:
        st.error(f"‚ùå Erreur OCR sur {os.path.basename(image_path)} : {e}")
        return ""


def get_montant_from_line(label_pattern, all_lines, allow_next_line=True):
    """
    Recherche un montant √† partir d'un label (ex: 'TOTAL', 'MONTANT R√âEL', etc.)
    Corrig√©e pour √™tre plus robuste face aux erreurs d‚ÄôOCR et aux formats de tickets vari√©s.
    """
    montant_regex = r"(\d{1,5}[.,]?\d{0,2})\s*(?:‚Ç¨|eur|euros?)?"

    def clean_ocr_text(txt):
        """Corrige les erreurs courantes de lecture OCR (O/0, I/1, etc.)."""
        txt = txt.replace("O", "0").replace("o", "0")
        txt = txt.replace("I", "1").replace("l", "1")
        txt = re.sub(r"[\u200b\s]+", " ", txt)
        return txt.strip()

    for i, l in enumerate(all_lines):
        l_clean = clean_ocr_text(l)

        # Recherche du label (ex: 'TOTAL', 'MONTANT', etc.)
        if re.search(label_pattern, l_clean, re.IGNORECASE):
            found_same = re.findall(montant_regex, l_clean, re.IGNORECASE)
            if found_same:
                # Prend le montant le plus grand sur la ligne (souvent le total TTC)
                return float(max(found_same, key=lambda x: float(x.replace(",", "."))).replace(",", "."))

            # Ligne suivante possible
            if allow_next_line and i + 1 < len(all_lines):
                next_line = clean_ocr_text(all_lines[i + 1])
                found_next = re.findall(montant_regex, next_line, re.IGNORECASE)
                if found_next:
                    return float(max(found_next, key=lambda x: float(x.replace(",", "."))).replace(",", "."))

    # Si rien trouv√©, essaie de rep√©rer un montant seul sur une ligne typique de paiement
    for l in all_lines:
        l_clean = clean_ocr_text(l)
        match = re.search(r"(\d+[.,]\d{2})", l_clean)
        if match:
            try:
                return float(match.group(1).replace(",", "."))
            except ValueError:
                continue


    return 0.0


def parse_ticket_metadata(ocr_text: str):
    """
    Analyse un texte OCR de ticket pour extraire les montants (total, paiements, TVA),
    et choisit le montant final par validation crois√©e.
    """
    lines = [l.strip() for l in ocr_text.split("\n") if l.strip()]

    def normalize_line(l):
        return l.replace("O", "0").replace("o", "0").replace("I", "1").replace("l", "1").strip()

    lines = [normalize_line(l) for l in lines]

    montant_regex = r"(\d{1,5}[.,]\d{1,2})"

    # === M√âTHODE A : Totaux directs (comme avant)
    total_patterns = [
        r"TOTAL\s*TTC", r"TOTAL\s*(A\s*PAYER)?", r"MONTANT\s*(R[E√â]EL|TTC)?",
        r"NET\s*A\s*PAYER", r"√Ä\s*PAYER", r"TOTAL$", r"TTC"
    ]
    montants_A = []
    for pattern in total_patterns:
        m = get_montant_from_line(pattern, lines)
        if m > 0:
            montants_A.append(round(m, 2))

    # === M√âTHODE B : Somme des paiements (CB, esp√®ces, web, etc.)
    paiement_patterns = [r"CB", r"CARTE", r"ESPECES", r"WEB", r"PAYPAL", r"CHEQUE"]
    montants_B = []
    for l in lines:
        if any(re.search(p, l, re.IGNORECASE) for p in paiement_patterns):
            found = re.findall(montant_regex, l)
            for val in found:
                try:
                    montants_B.append(float(val.replace(",", ".")))
                except:
                    pass
    somme_B = round(sum(montants_B), 2) if montants_B else 0.0

    # === M√âTHODE C : Net + TVA
    net_lines = [l for l in lines if re.search(r"HT|NET", l, re.IGNORECASE)]
    tva_lines = [l for l in lines if re.search(r"TVA|T\.V\.A", l, re.IGNORECASE)]
    total_HT = 0.0
    total_TVA = 0.0
    for l in net_lines:
        vals = re.findall(montant_regex, l)
        for v in vals:
            total_HT += float(v.replace(",", "."))
    for l in tva_lines:
        vals = re.findall(montant_regex, l)
        for v in vals:
            total_TVA += float(v.replace(",", "."))
    somme_C = round(total_HT + total_TVA, 2) if total_HT > 0 else 0.0

    # === M√âTHODE D : fallback global (si rien trouv√©)
    all_amounts = [float(m.replace(",", ".")) for m in re.findall(montant_regex, ocr_text)]
    montant_fallback = max(all_amounts) if all_amounts else 0.0

    # === VALIDATION CROIS√âE
    candidats = [x for x in montants_A + [somme_B, somme_C, montant_fallback] if x > 0]
    freq = {}
    for m in candidats:
        m_rond = round(m, 2)
        freq[m_rond] = freq.get(m_rond, 0) + 1
    if not freq:
        montant_final = 0.0
    else:
        montant_final = max(freq, key=freq.get)  # prend le montant le plus r√©current

    # === D√©tection de la date (inchang√©e)
    date_patterns = [
        r"\b\d{1,2}[./\-]\d{1,2}[./\-]\d{2,4}\b",
        r"\b\d{1,2}\s*(janv|f√©vr|mars|avr|mai|juin|juil|ao√ªt|sept|oct|nov|d√©c)\.?\s*\d{2,4}\b"
    ]
    detected_date = None
    for p in date_patterns:
        match = re.search(p, ocr_text, re.IGNORECASE)
        if match:
            try:
                detected_date = parser.parse(match.group(0), dayfirst=True, fuzzy=True).date().isoformat()
                break
            except:
                continue
    if not detected_date:
        detected_date = datetime.now().date().isoformat()

    # === Lignes cl√©s (pour affichage dans interface)
    key_lines = [
        l for l in lines if any(re.search(p, l, re.IGNORECASE) for p in total_patterns + paiement_patterns)
    ]

    # === R√©sultat final
    montants_possibles = sorted(set(candidats), reverse=True)
    return {
        "montants_possibles": montants_possibles if montants_possibles else [montant_final],
        "montant": montant_final,
        "date": detected_date,
        "infos": "\n".join(key_lines)
    }



def move_ticket_to_sorted(ticket_path, categorie, sous_categorie):
    """D√©place un ticket trait√© vers le dossier 'tickets_scannes' class√© par cat√©gorie/sous-cat√©gorie.
       G√®re automatiquement les doublons en renommant les fichiers si n√©cessaire."""
    cat_dir = os.path.join(SORTED_DIR, categorie.strip())
    souscat_dir = os.path.join(cat_dir, sous_categorie.strip())
    os.makedirs(souscat_dir, exist_ok=True)

    base_name = os.path.basename(ticket_path)
    dest_path = os.path.join(souscat_dir, base_name)

    # üîÅ Si un fichier du m√™me nom existe d√©j√†, on cr√©e un nom unique
    if os.path.exists(dest_path):
        name, ext = os.path.splitext(base_name)
        counter = 1
        while os.path.exists(dest_path):
            new_name = f"{name}_{counter}{ext}"
            dest_path = os.path.join(souscat_dir, new_name)
            counter += 1

    shutil.move(ticket_path, dest_path)
    st.success(f"‚úÖ Ticket d√©plac√© vers : {dest_path}")
    
    
def insert_transaction_batch(transactions):
    """
    Ins√®re plusieurs transactions dans la base SQLite.
    √âvite les doublons bas√©s sur (type, cat√©gorie, sous_cat√©gorie, montant, date).
    """
    if not transactions:
        return
    conn = get_db_connection()
    cur = conn.cursor()

    inserted, skipped = 0, 0

    for t in transactions:
        try:
            cur.execute("""
                SELECT COUNT(*) FROM transactions
                WHERE type = ? AND categorie = ? AND sous_categorie = ?
                      AND montant = ? AND date = ?
            """, (
                t["type"],
                t.get("categorie", ""),
                t.get("sous_categorie", ""),
                float(t["montant"]),
                t["date"]
            ))

            if cur.fetchone()[0] > 0:
                skipped += 1
                continue

            cur.execute("""
                INSERT INTO transactions
                (type, categorie, sous_categorie, description, montant, date, source, recurrence, date_fin)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                t["type"],
                t.get("categorie", ""),
                t.get("sous_categorie", ""),
                t.get("description", ""),
                float(t["montant"]),
                t["date"],
                t.get("source", "manuel"),
                t.get("recurrence", "ponctuelle"),
                t.get("date_fin")
            ))
            inserted += 1

        except Exception as e:
            print(f"Erreur lors de l‚Äôinsertion de {t}: {e}")

    conn.commit()
    conn.close()
    st.success(f"‚úÖ {inserted} transaction(s) ins√©r√©e(s).")
    if skipped > 0:
        st.info(f"‚ÑπÔ∏è {skipped} doublon(s) d√©tect√©(s) et ignor√©(s).")



def extract_text_from_pdf(pdf_path):
    """Lit un PDF et renvoie le texte brut."""
    from pdfminer.high_level import extract_text
    try:
        return extract_text(pdf_path)
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Impossible de lire le PDF {pdf_path} ({e})")
        return ""
    
    
def parse_uber_pdf(pdf_path: str) -> dict:
    """
    Parseur sp√©cifique pour les PDF Uber.
    Objectif : extraire le montant net (net earnings) et la date de fin de p√©riode de facturation.
    Renvoie dict avec cl√©s : montant (float), date (datetime.date), categorie, sous_categorie, source.
    """
    text = extract_text_from_pdf(pdf_path)
    if not text:
        return {
            "montant": 0.0,
            "date": datetime.now().date(),
            "categorie": "Revenu",
            "sous_categorie": "Uber",
            "source": "PDF Uber"
        }

    # Cherche une p√©riode de facturation sous forme "P√©riode de facturation : 01/07/2025 - 31/07/2025"
    date_fin = None
    periode_match = re.search(
        r"P[e√©]riode de facturation\s*[:\-]?\s*([0-3]?\d[\/\-\.][01]?\d[\/\-\.]\d{2,4})\s*[\-‚Äì]\s*([0-3]?\d[\/\-\.][01]?\d[\/\-\.]\d{2,4})",
        text,
        re.IGNORECASE
    )
    if periode_match:
        debut_str, fin_str = periode_match.groups()
        for fmt in ("%d/%m/%Y", "%d/%m/%y", "%d-%m-%Y", "%d-%m-%y"):
            try:
                date_fin = datetime.strptime(fin_str, fmt).date()
                break
            except Exception:
                continue

    # Si non trouv√© par pattern, on tente de trouver une date "P√©riode termin√©e le : 31/07/2025" ou "Period ending 31/07/2025"
    if not date_fin:
        m2 = re.search(
            r"(period ending|p[e√©]riode termin[e√©]e le|Date de fin)\s*[:\-]?\s*([0-3]?\d[\/\-\.][01]?\d[\/\-\.]\d{2,4})",
            text,
            re.IGNORECASE
        )
        if m2:
            date_str = m2.group(2)
            for fmt in ("%d/%m/%Y", "%d/%m/%y", "%d-%m-%Y", "%d-%m-%y"):
                try:
                    date_fin = datetime.strptime(date_str, fmt).date()
                    break
                except Exception:
                    continue

    if not date_fin:
        date_fin = datetime.now().date()

    # Montant net : varie selon le PDF Uber (Net earnings, Total to be paid, etc.)
    # On cherche d'abord des expressions anglaises ou fran√ßaises communes
    montant = 0.0
    montant_patterns = [
        r"(?:Net earnings|Net to driver|Total net|Montant net|Net earnings \(driver\))\s*[:\-\‚Äì]?\s*([0-9]+[.,][0-9]{2})\s*‚Ç¨?",
        r"([\d]{1,3}(?:[ .,]\d{3})*[.,]\d{2})\s*‚Ç¨\s*(?:net|netto|net earnings|to driver)?"
    ]
    for p in montant_patterns:
        m = re.search(p, text, re.IGNORECASE)
        if m:
            s = m.group(1).replace(" ", "").replace(".", "").replace(",", ".") if "," in m.group(1) and "." in m.group(1) else m.group(1).replace(",", ".").replace(" ", "")
            try:
                montant = float(s)
                break
            except Exception:
                continue

    # fallback: chercher le dernier montant pr√©sent dans le texte (souvent utile si formats vari√©s)
    if montant == 0.0:
        all_amounts = re.findall(r"(\d+[.,]\d{2})\s*‚Ç¨?", text)
        if all_amounts:
            # souvent le montant net est parmi les derniers montants, on prend le dernier non nul
            for a in reversed(all_amounts):
                try:
                    candidate = float(a.replace(",", "."))
                    if candidate > 0:
                        montant = candidate
                        break
                except:
                    continue

    return {
        "montant": round(montant, 2),
        "date": date_fin,
        "categorie": "Revenu",
        "sous_categorie": "Uber Eats",
        "source": "PDF Uber"
    }

    
def parse_fiche_paie(pdf_path: str) -> dict:
    """
    Parseur sp√©cifique pour fiche de paie.
    Objectif : trouver la p√©riode (ou la date concern√©e) et le net √† payer.
    Renvoie dict similaire √† parse_uber_pdf.
    """
    text = extract_text_from_pdf(pdf_path)
    if not text:
        return {"montant": 0.0, "date": datetime.now().date(), "categorie": "Revenu", "sous_categorie": "Salaire", "source": "PDF Fiche de paie"}

    # 1) Trouver le net √† payer (patterns : NET A PAYER, Net √† payer, Net pay, Net salary)
    montant = 0.0
    net_patterns = [
        r"NET\s*A\s*PAYER\s*[:\-\‚Äì]?\s*([0-9]+[.,][0-9]{2})",
        r"Net √† payer\s*[:\-\‚Äì]?\s*([0-9]+[.,][0-9]{2})",
        r"Net √† payer \(√† vous\)\s*[:\-\‚Äì]?\s*([0-9]+[.,][0-9]{2})",
        r"Net\s*[:\-\‚Äì]?\s*([0-9]+[.,][0-9]{2})"  # fallback
    ]
    for p in net_patterns:
        m = re.search(p, text, re.IGNORECASE)
        if m:
            try:
                montant = float(m.group(1).replace(",", "."))
                break
            except:
                continue

    # fallback : prendre le dernier montant trouv√©, mais prudence
    if montant == 0.0:
        amounts = re.findall(r"(\d+[.,]\d{2})\s*‚Ç¨?", text)
        if amounts:
            # on peut prioriser montants > 100 (suppos√©s √™tre net), sinon prendre le dernier
            candidates = [float(a.replace(",", ".")) for a in amounts]
            bigs = [c for c in candidates if c > 100]  # heuristique : salaire > 100‚Ç¨
            montant = bigs[-1] if bigs else candidates[-1]

    # 2) Trouver la p√©riode ou la date : recherche de "p√©riode" ou intervalle "01/07/2025 - 31/07/2025"
    date_found = None
    periode_match = re.search(r"(\d{1,2}[\/\-\.]\d{1,2}[\/\-\.]\d{2,4})\s*[\-‚Äì]\s*(\d{1,2}[\/\-\.]\d{1,2}[\/\-\.]\d{2,4})", text)
    if periode_match:
        # on prend la date de fin comme date du revenu
        fin_str = periode_match.groups()[1]
        for fmt in ("%d/%m/%Y", "%d/%m/%y", "%d-%m-%Y", "%d-%m-%y"):
            try:
                date_found = datetime.strptime(fin_str, fmt).date()
                break
            except:
                pass

    # autre pattern : "P√©riode du : 01/07/2025 au 31/07/2025" ou "Pour le mois de juillet 2025"
    if not date_found:
        m2 = re.search(r"Pour le mois de\s+([A-Za-z√©√ª√†]+)\s+(\d{4})", text, re.IGNORECASE)
        if m2:
            mois_str, annee_str = m2.groups()
            # mapping simple des mois FR (on peut √©tendre si besoin)
            mois_map = {
                "janvier":1,"f√©vrier":2,"fevrier":2,"mars":3,"avril":4,"mai":5,"juin":6,
                "juillet":7,"ao√ªt":8,"aout":8,"septembre":9,"octobre":10,"novembre":11,"d√©cembre":12,"decembre":12
            }
            mois_key = mois_str.lower()
            mois_num = mois_map.get(mois_key)
            if mois_num:
                # on choisit la fin du mois comme date
                from calendar import monthrange
                last_day = monthrange(int(annee_str), mois_num)[1]
                date_found = date(int(annee_str), mois_num, last_day)

    if not date_found:
        # fallback : date d'aujourd'hui
        date_found = datetime.now().date()

    return {
        "montant": round(float(montant), 2),
        "date": date_found,
        "categorie": "Revenu",
        "sous_categorie": "Salaire",
        "source": "PDF Fiche de paie"
    }


def parse_pdf_dispatcher(pdf_path: str, source_type: str) -> dict:
    """
    Dispatcher simple pour choisir le parseur adapt√©.
    source_type attendu : 'uber', 'fiche_paie', 'ticket' (ou 'auto' pour tentative heuristique).
    """
    stype = source_type.lower().strip()
    if stype in ("uber", "uber_pdf", "uber eats"):
        return parse_uber_pdf(pdf_path)
    elif stype in ("fiche_paie", "fiche de paie", "paye", "salaire"):
        return parse_fiche_paie(pdf_path)
    elif stype in ("ticket", "receipt", "ticket_ocr"):
        # si tu veux parser un PDF ticket (rare), tu peux appeler parse_ticket_metadata en lui passant le texte
        text = extract_text_from_pdf(pdf_path)
        # parse_ticket_metadata attend du texte OCR ; si elle attend un path, adapte
        return parse_ticket_metadata(text)
    elif stype == "auto":
        # heuristique : essaye d'identifier le type en recherchant des mots-cl√©s dans le PDF
        text = extract_text_from_pdf(pdf_path).lower()
        if "uber" in text or "net to driver" in text or "period" in text:
            return parse_uber_pdf(pdf_path)
        if "net a payer" in text or "fiche de paie" in text or "bulletin" in text:
            return parse_fiche_paie(pdf_path)
        # fallback : on renvoie quelque chose g√©n√©rique
        return {"montant": 0.0, "date": datetime.now().date(), "categorie": "Revenu", "sous_categorie": "Inconnu", "source": "PDF Auto"}
    else:
        raise ValueError(f"Source_type inconnu pour parse_pdf_dispatcher: {source_type}")


def ajouter_transaction(
    categorie,
    sous_categorie,
    montant,
    date_transaction,
    type_transac="d√©pense",
    source="manuel",
    recurrence=None,
    date_fin=None
):
    """Ajoute une transaction dans la base de donn√©es."""
    if not categorie or montant <= 0:
        raise ValueError("Cat√©gorie ou montant invalide.")

    # ‚úÖ Connexion √† la base configur√©e
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("""
        INSERT INTO transactions (type, categorie, sous_categorie, montant, date, source, recurrence, date_fin)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        type_transac,
        categorie.strip(),
        sous_categorie.strip() if sous_categorie else "",
        float(montant),
        date_transaction.isoformat(),
        source,
        recurrence,
        date_fin.isoformat() if date_fin else None
    ))

    conn.commit()
    conn.close()


def _inc(d, recurrence):
    if recurrence == "hebdomadaire":
        return d + relativedelta(weeks=1)
    if recurrence == "mensuelle":
        return d + relativedelta(months=1)
    if recurrence == "annuelle":
        return d + relativedelta(years=1)
    return d  # fallback


def backfill_recurrences_to_today(db_path):
    """
    Pour chaque mod√®le 'r√©currente', g√©n√®re toutes les occurrences manquantes
    (source='r√©currente_auto') jusqu'√† aujourd'hui (ou date_fin si elle existe).
    """
    today = date.today()

    conn = get_db_connection()
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()

    # 1) R√©cup√®re tous les mod√®les
    cur.execute("""
        SELECT id, type, categorie, sous_categorie,description, montant, date, source, recurrence, date_fin
        FROM transactions
        WHERE source='r√©currente_auto'
    """)
    models = cur.fetchall()

    for m in models:
        cat = (m["categorie"] or "").strip()
        sous = (m["sous_categorie"] or "").strip()
        rec = (m["recurrence"] or "").strip()
        if not rec:
            continue

        # bornes
        try:
            start = date.fromisoformat(m["date"])
        except Exception:
            continue
        end_limit = None
        if m["date_fin"]:
            try:
                end_limit = date.fromisoformat(m["date_fin"])
            except Exception:
                end_limit = None
        limit = min(today, end_limit) if end_limit else today

        if start > limit:
            continue  # rien √† g√©n√©rer encore

        # 2) Derni√®re occurrence d√©j√† existante
        cur.execute("""
            SELECT MAX(date) as last_date
            FROM transactions
            WHERE source='r√©currente_auto'
              AND categorie=? AND sous_categorie=?
              AND recurrence=?
              AND type=?
        """, (cat, sous, rec, m["type"]))
        row = cur.fetchone()
        last = date.fromisoformat(row["last_date"]) if row and row["last_date"] else None

        # 3) Calcule la prochaine date √† g√©n√©rer
        if last:
            next_d = _inc(last, rec)
        else:
            # premi√®re occurrence = start (et on l‚Äôajoute si <= limit)
            next_d = start

        # 4) G√©n√®re tout ce qui manque jusqu‚Äô√† 'limit'
        to_insert = []
        while next_d <= limit:
            to_insert.append((
                m["type"], cat, sous, float(m["montant"]), next_d.isoformat(),
                "r√©currente_auto", rec, m["date_fin"]
            ))
            next_d = _inc(next_d, rec)

        if to_insert:
            cur.executemany("""
                INSERT INTO transactions (type, categorie, sous_categorie, montant, date, source, recurrence, date_fin)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, to_insert)

    conn.commit()
    conn.close()


# ==============================
# ‚öôÔ∏è CONFIGURATION DES CHEMINS
# ==============================
def interface_configuration_chemins():
    """Interface pour modifier les chemins des dossiers internes"""
    st.header("‚öôÔ∏è Configuration des dossiers")
    
    st.info("""
    **üìÅ Organisation actuelle :**
    - üéØ **Tickets √† scanner** : `{}` (sur le Bureau)
    - üéØ **Revenus √† traiter** : `{}` (sur le Bureau)
    - üîß **Dossiers modifiables** : Tickets scann√©s et Revenus trait√©s
    """.format(TO_SCAN_DIR, REVENUS_A_TRAITER))
    
    st.markdown("---")
    
    # Modification des dossiers internes
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìÇ Tickets scann√©s")
        st.write(f"Chemin actuel : `{SORTED_DIR}`")
        nouveau_sorted = st.text_input(
            "Nouveau chemin pour Tickets scann√©s :",
            value=SORTED_DIR,
            help="Dossier o√π seront rang√©s les tickets apr√®s traitement"
        )
        
        if st.button("üíæ Sauvegarder Tickets scann√©s"):
            if nouveau_sorted and nouveau_sorted != SORTED_DIR:
                try:
                    os.makedirs(nouveau_sorted, exist_ok=True)
                    config = load_config()
                    config["sorted_dir"] = nouveau_sorted
                    save_config(config)
                    st.success(f"‚úÖ Chemin Tickets scann√©s mis √† jour : {nouveau_sorted}")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå Erreur : {e}")
    
    with col2:
        st.subheader("üìÇ Revenus trait√©s")
        st.write(f"Chemin actuel : `{REVENUS_TRAITES}`")
        nouveau_revenus = st.text_input(
            "Nouveau chemin pour Revenus trait√©s :",
            value=REVENUS_TRAITES,
            help="Dossier o√π seront rang√©s les revenus apr√®s traitement"
        )
        
        if st.button("üíæ Sauvegarder Revenus trait√©s"):
            if nouveau_revenus and nouveau_revenus != REVENUS_TRAITES:
                try:
                    os.makedirs(nouveau_revenus, exist_ok=True)
                    config = load_config()
                    config["revenus_traites_dir"] = nouveau_revenus
                    save_config(config)
                    st.success(f"‚úÖ Chemin Revenus trait√©s mis √† jour : {nouveau_revenus}")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå Erreur : {e}")
    
    st.markdown("---")
    
    # R√©initialisation
    if st.button("üîÑ R√©initialiser les chemins par d√©faut"):
        config = {"sorted_dir": None, "revenus_traites_dir": None}
        save_config(config)
        st.success("‚úÖ Chemins r√©initialis√©s aux valeurs par d√©faut")
        st.rerun()

# ==============================
# üì§ UPLOAD DE SECOURS
# ==============================
def interface_upload_secours_tickets():
    """Upload de secours pour les tickets"""
    st.markdown("---")
    st.subheader("üì§ Uploader des tickets directement")
    
    uploaded_files = st.file_uploader(
        "Si vous ne trouvez pas le dossier, uploader ici :",
        type=["jpg", "jpeg", "png", "pdf"],
        accept_multiple_files=True,
        key="upload_secours_tickets"
    )
    
    if uploaded_files:
        for uploaded_file in uploaded_files:
            file_path = os.path.join(TO_SCAN_DIR, uploaded_file.name)
            
            # Gestion des doublons
            counter = 1
            name, ext = os.path.splitext(uploaded_file.name)
            while os.path.exists(file_path):
                new_name = f"{name}_{counter}{ext}"
                file_path = os.path.join(TO_SCAN_DIR, new_name)
                counter += 1
            
            with open(file_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
        
        st.success(f"‚úÖ {len(uploaded_files)} ticket(s) ajout√©(s) !")
        st.info("üîÑ Actualisez la page pour voir les nouveaux tickets")
        st.rerun()

def interface_upload_secours_revenus():
    """Upload de secours pour les revenus"""
    st.markdown("---")
    st.subheader("üì§ Uploader des revenus directement")
    
    uploaded_files = st.file_uploader(
        "Si vous ne trouvez pas le dossier, uploader ici :",
        type=["pdf"],
        accept_multiple_files=True,
        key="upload_secours_revenus"
    )
    
    if uploaded_files:
        for uploaded_file in uploaded_files:
            file_path = os.path.join(REVENUS_A_TRAITER, uploaded_file.name)
            
            # Gestion des doublons
            counter = 1
            name, ext = os.path.splitext(uploaded_file.name)
            while os.path.exists(file_path):
                new_name = f"{name}_{counter}{ext}"
                file_path = os.path.join(REVENUS_A_TRAITER, new_name)
                counter += 1
            
            with open(file_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
        
        st.success(f"‚úÖ {len(uploaded_files)} revenu(s) ajout√©(s) !")
        st.info("üîÑ Actualisez la page pour voir les nouveaux revenus")
        st.rerun()


# ==============================
# ‚öôÔ∏è TRAITEMENT DES TICKETS ET REVENUS
# ==============================
def process_all_tickets_in_folder():
    """
    Traite tous les tickets du dossier TO_SCAN_DIR :
    - OCR
    - extraction montants / date / infos cl√©s
    - confirmation utilisateur
    - insertion en base + d√©placement
    """
    st.subheader("üßæ Traitement des tickets √† scanner")

    # Information des chemins (TOUJOURS afficher)
    st.info(f"""
    **üìÅ Dossier des tickets √† scanner :**
    `{TO_SCAN_DIR}`
    
    **üí° M√©thode recommand√©e :** Glissez-d√©posez vos tickets directement dans ce dossier sur le Bureau
    """)
    
    tickets = [f for f in os.listdir(TO_SCAN_DIR) if f.lower().endswith((".jpg", ".png", ".jpeg", ".pdf"))]
    
    if not tickets:
        st.warning("üìÇ Aucun ticket trouv√© dans le dossier.")
        # Afficher l'upload de secours si pas de tickets
        interface_upload_secours_tickets()
        return
    
    st.success(f"üßÆ {len(tickets)} ticket(s) d√©tect√©(s) - Pr√™ts √† √™tre trait√©s !")

    for ticket_file in tickets:
        ticket_path = os.path.join(TO_SCAN_DIR, ticket_file)
        st.markdown("---")
        st.markdown(f"### üßæ {ticket_file}")

        # --- OCR selon format ---
        try:
            if ticket_file.lower().endswith(".pdf"):
                text = extract_text_from_pdf(ticket_path)
                # Affichage PDF
                with st.expander(f"üìÑ Texte OCR extrait du PDF : {ticket_file}", expanded=False):
                    st.text_area("Contenu OCR :", text, height=200)
            else:
                # Affichage image
                text = full_ocr(ticket_path, show_ticket=True)
        except Exception as e:
            st.error(f"‚ùå Erreur OCR sur {ticket_file} : {e}")
            continue

        # --- Analyse du texte OCR ---
        data = parse_ticket_metadata(text)

        montant_final = data.get("montant", 0.0)
        montants_possibles = data.get("montants_possibles", [montant_final])
        detected_date = data.get("date", datetime.now().date().isoformat())
        key_info = data.get("infos", "")
        
        # --- D√©duction cat√©gorie ---
        name = os.path.splitext(ticket_file)[0]
        parts = name.split(".")[1:]

        if len(parts) >= 2:
            categorie_auto = parts[1].capitalize()
            sous_categorie_auto = parts[0].capitalize()
        elif len(parts) == 1:
            categorie_auto = parts[0].capitalize()
            sous_categorie_auto = "Autre"
        else:
            categorie_auto = "Divers"
            sous_categorie_auto = "Autre"

        st.markdown(f"üß† **Cat√©gorie auto-d√©tect√©e :** {categorie_auto} ‚Üí {sous_categorie_auto}")

        with st.expander("üìú Aper√ßu OCR (lignes cl√©s)"):
            st.text(key_info)

        # --- Interface validation ---
        with st.form(f"form_{ticket_file}"):
            col1, col2 = st.columns(2)
            with col1:
                categorie = st.text_input("Cat√©gorie principale", categorie_auto)
                sous_categorie = st.text_input("Sous-cat√©gorie", sous_categorie_auto)
            with col2:
                montant_select = st.selectbox(
                    "Montant d√©tect√©",
                    options=[round(m, 2) for m in montants_possibles],
                    index=0 if montants_possibles else 0
                )
                montant_corrige = st.number_input(
                    "üí∂ Corriger le montant si besoin (‚Ç¨)",
                    value=float(montant_select) if montant_select else 0.0,
                    min_value=0.0,
                    step=0.01
                )
                date_ticket = st.date_input("üìÖ Date du ticket", datetime.fromisoformat(detected_date))

            valider = st.form_submit_button("‚úÖ Valider et enregistrer ce ticket")

        # --- Validation / sauvegarde ---
        if valider:
            if not categorie or montant_corrige <= 0:
                st.error("‚ö†Ô∏è Cat√©gorie ou montant invalide.")
                continue

            insert_transaction_batch([{
                "type": "d√©pense",
                "categorie": categorie.strip(),
                "sous_categorie": sous_categorie.strip(),
                "montant": montant_corrige,
                "date": date_ticket.isoformat(),
                "source": "OCR"
            }])

            move_ticket_to_sorted(ticket_path, categorie, sous_categorie)
            st.success(f"üíæ Ticket {ticket_file} enregistr√© avec succ√®s ({montant_corrige:.2f} ‚Ç¨).")


def interface_process_all_revenues_in_folder():
    st.subheader("üì• Scanner et enregistrer tous les revenus depuis le dossier")

     # Information des chemins
    st.info(f"""
    **üìÅ Dossier des revenus √† traiter :**
    `{REVENUS_A_TRAITER}`
    
    **üí° M√©thode recommand√©e :** Glissez-d√©posez vos PDF directement dans ce dossier sur le Bureau
    """)
    
    # [RESTE DU CODE EXISTANT INCHANG√â jusqu'√† la v√©rification des fichiers...]
    
    src_folder = REVENUS_A_TRAITER 
    pdfs = [os.path.join(root, f)
            for root, _, files in os.walk(src_folder)
            for f in files if f.lower().endswith(".pdf")]
    
    if not pdfs:
        st.warning("üìÇ Aucun PDF de revenu trouv√© dans le dossier.")
        # Afficher l'upload de secours si pas de revenus
        interface_upload_secours_revenus()
        return
    
    st.success(f"üßÆ {len(pdfs)} revenu(s) d√©tect√©(s) - Pr√™ts √† √™tre trait√©s !")

    # --- √âtape 1 : scanner les fichiers une seule fois ---
    if "revenus_data" not in st.session_state:
        st.session_state["revenus_data"] = []

    if st.button("üöÄ Scanner tous les revenus") and not st.session_state["revenus_data"]:
        pdfs = [os.path.join(root, f)
                for root, _, files in os.walk(src_folder)
                for f in files if f.lower().endswith(".pdf")]

        if not pdfs:
            st.warning("üìÇ Aucun PDF de revenu trouv√© dans le dossier.")
            return

        data_list = []
        for pdf_path in pdfs:
            # Identifier le sous-dossier utile
            parent_folder = os.path.basename(os.path.dirname(pdf_path))

            # Si le parent est "revenus_a_traiter", on ignore
            if parent_folder.lower() in ["revenus_a_traiter", "revenus_trait√©", "revenus_trait√©s"]:
                sous_dossier = "Revenus"
            else:
                sous_dossier = parent_folder


            # Parsing selon type
            try:
                if sous_dossier.lower() == "uber":
                    parsed = parse_uber_pdf(pdf_path)
                else:
                    parsed = parse_fiche_paie(pdf_path)
            except Exception:
                parsed = {"montant": 0.0, "date": datetime.today().date(), "source": "PDF Auto"}

            # Calcul du mois en fran√ßais
            date_val = parsed.get("date", datetime.today().date())
            if isinstance(date_val, str):
                date_val = datetime.fromisoformat(date_val).date()
            mois_nom = numero_to_mois(f"{date_val.month:02d}")

            data_list.append({
                "file": os.path.basename(pdf_path),
                "path": pdf_path,
                "categorie": sous_dossier,
                "sous_categorie": mois_nom,
                "montant": parsed.get("montant", 0.0),
                "date": date_val,
                "source": parsed.get("source", "PDF Auto")
            })

        st.session_state["revenus_data"] = data_list
        st.success("‚úÖ Revenus scann√©s avec succ√®s. Tu peux maintenant les modifier avant validation.")

    # --- √âtape 2 : affichage et √©dition persistante ---
    if st.session_state.get("revenus_data"):
        updated_list = []
        for idx, data in enumerate(st.session_state["revenus_data"]):
            st.markdown("---")
            st.write(f"üìÑ {data['file']}")
            col1, col2 = st.columns(2)
            with col1:
                cat = st.text_input(f"Cat√©gorie ({data['file']})", value=data["categorie"], key=f"rev_cat_{idx}")
                souscat = st.text_input(f"Sous-cat√©gorie ({data['file']})", value=data["sous_categorie"], key=f"rev_souscat_{idx}")
            with col2:
                montant_str = f"{data['montant']:.2f}" if data["montant"] else ""
                montant_edit = st.text_input(f"Montant (‚Ç¨) ({data['file']})", value=montant_str, key=f"rev_montant_{idx}")
                date_edit = st.date_input(f"Date ({data['file']})", value=data["date"], key=f"rev_date_{idx}")

            try:
                montant_val = float(montant_edit.replace(",", "."))
            except ValueError:
                montant_val = 0.0

            updated_list.append({
                "file": data["file"],
                "path": data["path"],
                "categorie": cat.strip(),
                "sous_categorie": souscat.strip(),
                "montant": montant_val,
                "date": date_edit,
                "source": data["source"]
            })

        st.session_state["revenus_data"] = updated_list

        st.markdown("---")
        st.warning("‚ö†Ô∏è V√©rifie bien les informations avant de confirmer l‚Äôenregistrement.")

        # --- √âtape 3 : validation et insertion ---
        if st.button("‚úÖ Confirmer et enregistrer tous les revenus"):
            conn = get_db_connection()
            cursor = conn.cursor()

            for data in st.session_state["revenus_data"]:
                cursor.execute("""
                    INSERT INTO transactions (type, categorie, sous_categorie, montant, date, source)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (
                    "revenu",
                    data["categorie"],
                    data["sous_categorie"],
                    data["montant"],
                    data["date"].isoformat(),
                    data["source"]
                ))

                # D√©placement du fichier ‚Äî tout reste centralis√© dans /data
                target_dir = os.path.join(REVENUS_TRAITES, data["categorie"], data["sous_categorie"])
                os.makedirs(target_dir, exist_ok=True)

                # On d√©place depuis /data/revenus_a_traiter ‚Üí /data/revenus_trait√©s/...
                shutil.move(data["path"], os.path.join(target_dir, data["file"]))


            conn.commit()
            conn.close()
            st.success("üéâ Tous les revenus ont √©t√© enregistr√©s et rang√©s avec succ√®s !")
            st.session_state.pop("revenus_data")


# =============================
#   TRANSACTION MANUELLE
# ‚úçÔ∏è AJOUTER UNE TRANSACTION MANUELLE
# =============================
def interface_transaction_manuelle():
    st.subheader("‚úçÔ∏è Ajouter une d√©pense manuelle")

    mode = st.radio(
        "Choisir le mode d‚Äôajout :",
        ["‚ûï Ajouter une d√©pense unique", "üì• Importer plusieurs transactions (CSV)"]
    )

    if mode == "‚ûï Ajouter une d√©pense unique":
        with st.form("ajouter_transaction_manuelle", clear_on_submit=True):
            col1, col2 = st.columns(2)
            with col1:
                categorie = st.text_input("Cat√©gorie principale (ex: essence, courses, sant√©)")
                sous_categorie = st.text_input("Sous-cat√©gorie (ex: Auchan, m√©decin, pharmacie)")
                description = st.text_area("Description (facultatif)")
            with col2:
                montant = st.number_input("Montant (‚Ç¨)", min_value=0.0, format="%.2f", step=0.01)
                date_transaction = st.date_input("Date de la transaction", date.today())
            submit_btn = st.form_submit_button("üíæ Enregistrer la transaction")

        if submit_btn:
            if not categorie or montant <= 0:
                st.error("‚ö†Ô∏è Veuillez entrer au moins une cat√©gorie et un montant valide.")
                return

            transaction = {
                "type": "d√©pense",
                "categorie": categorie,
                "sous_categorie": sous_categorie,
                "description": description,
                "montant": montant,
                "date": date_transaction.isoformat(),
                "source": "manuel"
            }
            insert_transaction_batch([transaction])
            st.success(f"‚úÖ Transaction enregistr√©e : {categorie} ‚Üí {sous_categorie or '(aucune sous-cat√©gorie)'} ‚Äî {montant:.2f} ‚Ç¨")

    elif mode == "üì• Importer plusieurs transactions (CSV)":
        st.info("üí° Le fichier CSV doit contenir : `Date`, `Categorie`, `Sous_categorie`, `Montant`, `Type` (revenu ou d√©pense).")
        uploaded_csv = st.file_uploader("Importer un fichier CSV de transactions", type=["csv"])
        if uploaded_csv:
            save_path = os.path.join("data", uploaded_csv.name)
            with open(save_path, "wb") as f:
                f.write(uploaded_csv.getbuffer())

            try:
                df = pd.read_csv(save_path, sep=",", encoding="utf-8")
            except UnicodeDecodeError:
                df = pd.read_csv(save_path, sep=",", encoding="ISO-8859-1")
            except Exception:
                df = pd.read_csv(save_path, sep=",", encoding="ISO-8859-1")

            st.dataframe(df.head(), use_container_width=True)
            st.success("‚úÖ Fichier CSV lu avec succ√®s. V√©rifie ci-dessus les 5 premi√®res lignes.")

            if st.button("üì§ Importer dans la base de donn√©es"):
                required_cols = {"Date", "Categorie", "Sous_categorie", "Montant", "Type"}
                if not required_cols.issubset(df.columns):
                    st.error("‚ö†Ô∏è Le fichier CSV doit contenir : Date, Categorie, Sous_categorie, Montant, Type.")
                    return

                transactions = []
                for _, row in df.iterrows():
                    try:
                        date_str = str(row["Date"])
                        if "-" in date_str:
                            date_iso = datetime.strptime(date_str, "%Y-%m-%d").date().isoformat()
                        else:
                            try:
                                date_iso = datetime.strptime(date_str, "%d/%m/%Y").date().isoformat()
                            except ValueError:
                                date_iso = datetime.strptime(date_str, "%d/%m/%y").date().isoformat()

                        transactions.append({
                            "type": str(row["Type"]).strip().lower(),
                            "categorie": str(row["Categorie"]).strip(),
                            "sous_categorie": str(row["Sous_categorie"]).strip(),
                            "montant": float(str(row["Montant"]).replace(",", ".")),
                            "date": date_iso,
                            "source": "import_csv"
                        })
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è Ligne ignor√©e √† cause d'une erreur : {e}")

                insert_transaction_batch(transactions)
                st.success(f"üéâ Import termin√© : {len(transactions)} transaction(s) trait√©e(s).")
        else:
            st.info("üìÇ Importez un fichier CSV avant de lancer l‚Äôimport.")


# =============================
# üîÅ AJOUTER UNE TRANSACTION R√âCURRENTE
# =============================
def interface_transaction_recurrente():
    st.subheader("üîÅ Ajouter une d√©pense r√©currente")

    with st.form("ajouter_transaction_recurrente", clear_on_submit=True):
        col1, col2 = st.columns(2)
        with col1:
            categorie = st.text_input("Cat√©gorie principale (ex: logement, assurance, abonnement)")
            sous_categorie = st.text_input("Sous-cat√©gorie (ex: EDF, Netflix, Loyer)")
            montant = st.number_input("Montant (‚Ç¨)", min_value=0.0, format="%.2f", step=0.01)
        with col2:
            recurrence = st.selectbox("Fr√©quence", ["hebdomadaire", "mensuelle", "annuelle"])
            date_debut = st.date_input("Date de d√©but", date.today())
            date_fin = st.date_input("Date de fin (facultatif)", None)
        submit_btn = st.form_submit_button("üíæ Enregistrer la r√©currence")

    if submit_btn:
        if not categorie or montant <= 0:
            st.error("‚ö†Ô∏è Veuillez entrer une cat√©gorie et un montant valide.")
            return

        safe_categorie = re.sub(r'[<>:"/\\|?*]', "_", categorie.strip())
        safe_sous_categorie = re.sub(r'[<>:"/\\|?*]', "_", sous_categorie.strip()) if sous_categorie else ""

        # Enregistrement mod√®le + occurrences
        today = date.today()
        occurrences = []
        current_date = date_debut
        while current_date <= today:
            occurrences.append(current_date)
            if recurrence == "hebdomadaire":
                current_date += timedelta(weeks=1)
            elif recurrence == "mensuelle":
                current_date += relativedelta(months=1)
            elif recurrence == "annuelle":
                current_date += relativedelta(years=1)
            if date_fin and current_date > date_fin:
                break

        transactions = [
            # mod√®le
            {
                "type": "d√©pense",
                "categorie": safe_categorie,
                "sous_categorie": safe_sous_categorie,
                "montant": montant,
                "date": date_debut.isoformat(),
                "source": "r√©currente",
                "recurrence": recurrence,
                "date_fin": date_fin.isoformat() if date_fin else None
            }
        ] + [
            # occurrences pass√©es
            {
                "type": "d√©pense",
                "categorie": safe_categorie,
                "sous_categorie": safe_sous_categorie,
                "montant": montant,
                "date": d.isoformat(),
                "source": "r√©currente_auto",
                "recurrence": recurrence
            } for d in occurrences
        ]

        insert_transaction_batch(transactions)
        st.success(f"‚úÖ Transaction r√©currente ({recurrence}) enregistr√©e.")
        st.info(f"{len(occurrences)} occurrence(s) pass√©e(s) ajout√©e(s).")


# ==============================
# üíº INTERFACE AJOUTER UN REVENU
# ==============================
def interface_ajouter_revenu():
    st.subheader("üíº Ajouter un revenu")

    mode = st.selectbox(
        "Choisir le mode d‚Äôajout du revenu :",
        ["S√©lectionner...", "Scanner depuis le dossier", "Ajouter manuellement", "Revenu r√©current"]
    )

    # =============================
    # 1Ô∏è‚É£ Scanner depuis le dossier
    # =============================
    if mode == "Scanner depuis le dossier":
        interface_process_all_revenues_in_folder()

    # =============================
    # 2Ô∏è‚É£ Ajouter un revenu manuel
    # =============================
    elif mode == "Ajouter manuellement":
        with st.form("ajouter_revenu_manuel", clear_on_submit=True):
            col1, col2 = st.columns(2)
            with col1:
                categorie = st.text_input("Cat√©gorie principale (ex: Uber, Animation, Salaire)")
                sous_categorie = st.text_input("Sous-cat√©gorie (ex: septembre, octobre, etc.)")
            with col2:
                montant = st.number_input("Montant (‚Ç¨)", min_value=0.0, format="%.2f", step=0.01)
                date_revenu = st.date_input("Date du revenu", date.today())

            submit_btn = st.form_submit_button("üíæ Enregistrer le revenu")

        if submit_btn:
            if not categorie or montant <= 0:
                st.error("‚ö†Ô∏è Veuillez entrer une cat√©gorie et un montant valide.")
                return

            insert_transaction_batch([{
                "type": "revenu",
                "categorie": categorie.strip(),
                "sous_categorie": sous_categorie.strip(),
                "montant": montant,
                "date": date_revenu.isoformat(),
                "source": "manuel"
            }])
            st.success("‚úÖ Revenu manuel ajout√© avec succ√®s !")

    # =============================
    # 3Ô∏è‚É£ Revenu r√©current
    # =============================
    elif mode == "Revenu r√©current":
        with st.form("ajouter_revenu_recurrent", clear_on_submit=True):
            col1, col2 = st.columns(2)
            with col1:
                categorie = st.text_input("Cat√©gorie principale (ex: Salaire, Bourse, CAF)")
                sous_categorie = st.text_input("Sous-cat√©gorie (ex: septembre, octobre, etc.)")
                montant = st.number_input("Montant du revenu (‚Ç¨)", min_value=0.0, format="%.2f", step=0.01)
            with col2:
                recurrence = st.selectbox("Fr√©quence", ["mensuelle", "hebdomadaire", "annuelle"])
                date_debut = st.date_input("Date de d√©but", date.today())
                date_fin = st.date_input("Date de fin (facultatif)", None)

            submit_btn = st.form_submit_button("üíæ Enregistrer la r√©currence")

        if submit_btn:
            if not categorie or montant <= 0:
                st.error("‚ö†Ô∏è Veuillez entrer une cat√©gorie et un montant valide.")
                return

            safe_categorie = re.sub(r'[<>:"/\\|?*]', "_", categorie.strip())
            safe_sous_categorie = re.sub(r'[<>:"/\\|?*]', "_", sous_categorie.strip()) if sous_categorie else ""

            today = date.today()
            occurrences = []
            current_date = date_debut
            while current_date <= today:
                occurrences.append(current_date)
                if recurrence == "hebdomadaire":
                    current_date += timedelta(weeks=1)
                elif recurrence == "mensuelle":
                    current_date += relativedelta(months=1)
                elif recurrence == "annuelle":
                    current_date += relativedelta(years=1)
                if date_fin and current_date > date_fin:
                    break

            transactions = [
                {"type": "revenu", "categorie": safe_categorie, "sous_categorie": safe_sous_categorie,
                 "montant": montant, "date": date_debut.isoformat(), "source": "r√©currente", "recurrence": recurrence,
                 "date_fin": date_fin.isoformat() if date_fin else None}
            ] + [
                {"type": "revenu", "categorie": safe_categorie, "sous_categorie": safe_sous_categorie,
                 "montant": montant, "date": d.isoformat(), "source": "r√©currente_auto", "recurrence": recurrence}
                for d in occurrences
            ]
            insert_transaction_batch(transactions)
            st.success(f"‚úÖ Revenu r√©current ({recurrence}) ajout√© avec succ√®s.")
            st.info(f"{len(occurrences)} versement(s) pass√©(s) ajout√©(s).")


#==============================
# üîÅ GERER LES RECURRENCES
# =============================
def interface_gerer_recurrences():
    st.subheader("üîÅ G√©rer les transactions r√©currentes")
    conn = get_db_connection()
    df = pd.read_sql_query("SELECT * FROM transactions WHERE source='r√©currente_auto' ORDER BY date DESC", conn)
    conn.close()

    if df.empty:
        st.info("Aucune transaction r√©currente trouv√©e.")
        return

    st.dataframe(df, use_container_width=True)
    selected_id = st.selectbox("S√©lectionner une r√©currence √† modifier :", df["id"].tolist())

    if selected_id:
        selected = df[df["id"] == selected_id].iloc[0]
        st.markdown(f"### üßæ {selected['categorie']} ‚Üí {selected['sous_categorie']}")
        new_montant = st.number_input("Montant", value=float(selected["montant"]), step=0.01)
        new_recurrence = st.selectbox("R√©currence", ["hebdomadaire", "mensuelle", "annuelle"], index=["hebdomadaire","mensuelle","annuelle"].index(selected["recurrence"]))
        new_date_fin = st.date_input("Date de fin", value=date.today() if not selected["date_fin"] else datetime.fromisoformat(selected["date_fin"]).date())
        col1, col2 = st.columns(2)

        with col1:
            if st.button("üíæ Enregistrer les modifications"):
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute("UPDATE transactions SET montant=?, recurrence=?, date_fin=? WHERE id=?", (new_montant, new_recurrence, new_date_fin.isoformat(), selected_id))
                conn.commit()
                conn.close()
                st.success("‚úÖ R√©currence mise √† jour avec succ√®s.")

        with col2:
            if st.button("üóëÔ∏è Supprimer cette r√©currence et toutes ses occurrences"):
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute("DELETE FROM transactions WHERE (source LIKE 'r√©currente%' AND categorie=? AND sous_categorie=?)", (selected["categorie"], selected["sous_categorie"]))
                conn.commit()
                conn.close()
                st.success("üóëÔ∏è R√©currence supprim√©e enti√®rement.")


# =============================
# üõ†Ô∏è GERER LES TRANSACTIONS
# =============================
def interface_gerer_transactions():
    st.subheader("üõ†Ô∏è G√©rer les transactions (modifier ou supprimer)")

    conn = get_db_connection()
    df = pd.read_sql_query("SELECT * FROM transactions ORDER BY date DESC", conn)
    conn.close()

    if df.empty:
        st.info("Aucune transaction √† g√©rer pour le moment.")
        return

    type_filter = st.selectbox("Type", ["Toutes", "revenu", "d√©pense"], key="type_filtre_gerer")
    cat_filter = st.selectbox("Cat√©gorie", ["Toutes"] + sorted(df["categorie"].dropna().unique().tolist()), key="cat_filtre_gerer")
    souscat_filter = st.selectbox("Sous-cat√©gorie", ["Toutes"] + sorted(df["sous_categorie"].dropna().unique().tolist()), key="souscat_filtre_gerer")

    if type_filter != "Toutes": df = df[df["type"] == type_filter]
    if cat_filter != "Toutes": df = df[df["categorie"] == cat_filter]
    if souscat_filter != "Toutes": df = df[df["sous_categorie"] == souscat_filter]

    if df.empty:
        st.warning("Aucune transaction trouv√©e avec ces filtres.")
        return

    df["üóëÔ∏è Supprimer"] = False
    st.info("üí° Modifie les valeurs directement ou coche les lignes √† supprimer.")
    df_edit = st.data_editor(df, use_container_width=True, num_rows="fixed", key="editor_transactions", hide_index=True)

    col1, col2 = st.columns(2)
    with col1:
        if st.button("üíæ Enregistrer les modifications dans la base"):
            conn = sqlite3.connect(os.path.join(DATA_DIR, "finances.db"))
            cursor = conn.cursor()
            for _, row in df_edit.iterrows():
                cursor.execute("UPDATE transactions SET categorie=?, sous_categorie=?, montant=?, date=? WHERE id=?", (row["categorie"], row["sous_categorie"], float(row["montant"]), row["date"], row["id"]))
            conn.commit()
            conn.close()
            st.success(f"‚úÖ {len(df_edit)} transaction(s) mise(s) √† jour avec succ√®s.")

    with col2:
        if st.button("üöÆ Supprimer les transactions s√©lectionn√©es"):
            to_delete = df_edit[df_edit.get("üóëÔ∏è Supprimer", False)]
            if not to_delete.empty:
                conn = get_db_connection()
                cursor = conn.cursor()
                for _, row in to_delete.iterrows():
                    cursor.execute("DELETE FROM transactions WHERE id=?", (row["id"],))
                conn.commit()
                conn.close()
                st.success(f"üóëÔ∏è {len(to_delete)} transaction(s) supprim√©e(s) avec succ√®s.")
            else:
                st.warning("‚ö†Ô∏è Coche au moins une transaction avant de supprimer.")


# =============================
# üìä VOIR TOUTES LES TRANSACTIONS
# =============================
def interface_voir_transactions():
    st.subheader("üìä Voir toutes les transactions")
    
    # ‚úÖ Backfill automatique avant de charger le tableau
    backfill_recurrences_to_today(DB_PATH)

    conn = get_db_connection()
    df = pd.read_sql_query("SELECT * FROM transactions ORDER BY date DESC", conn)
    conn.close()

    if df.empty:
        st.info("Aucune transaction enregistr√©e pour le moment.")
        return

    afficher_recurrentes = st.checkbox("üëÅÔ∏è Afficher aussi les mod√®les de r√©currence (source = 'r√©currente')", value=False)
    if not afficher_recurrentes: df = df[df["source"] != "r√©currente"]

    type_filter = st.selectbox("Type de transaction", ["Toutes", "revenu", "d√©pense"])
    categories = ["Toutes"] + sorted(df["categorie"].dropna().unique().tolist())
    cat_filter = st.selectbox("Cat√©gorie", categories)

    souscats = ["Toutes"]
    if cat_filter != "Toutes": souscats += sorted(df[df["categorie"] == cat_filter]["sous_categorie"].dropna().unique().tolist())
    souscat_filter = st.selectbox("Sous-cat√©gorie", souscats)

    col1, col2 = st.columns(2)
    date_debut = col1.date_input("Date d√©but", value=date(2025,1,1))
    date_fin = col2.date_input("Date fin", value=date.today())

    if type_filter != "Toutes": df = df[df["type"] == type_filter]
    if cat_filter != "Toutes": df = df[df["categorie"] == cat_filter]
    if souscat_filter != "Toutes": df = df[df["sous_categorie"] == souscat_filter]
    df = df[(df["date"] >= date_debut.isoformat()) & (df["date"] <= date_fin.isoformat())]

    if df.empty:
        st.warning("Aucune transaction trouv√©e avec ces filtres.")
        return

    st.markdown("---")
    st.markdown("### ‚úèÔ∏è S√©lectionne les transactions √† analyser ou laisse tout vide pour tout inclure")
    df_edit = st.data_editor(df, use_container_width=True, height=600, num_rows="fixed", key="data_view_editor",
                             column_config={"id":"ID","type":"Type","categorie":"Cat√©gorie","sous_categorie":"Sous-cat√©gorie","montant":"Montant (‚Ç¨)","date":"Date","source":"Source","recurrence":"R√©currence"}, hide_index=True)

    selected_rows = df_edit[df_edit.get("selected", False)] if "selected" in df_edit.columns else df_edit
    total_revenus = selected_rows[selected_rows["type"]=="revenu"]["montant"].sum()
    total_depenses = selected_rows[selected_rows["type"]=="d√©pense"]["montant"].sum()
    solde = total_revenus - total_depenses
    couleur_solde = "green" if solde>=0 else "red"

    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    col1.metric("üí∏ Total revenus", f"{total_revenus:.2f} ‚Ç¨")
    col2.metric("üí≥ Total d√©penses", f"{total_depenses:.2f} ‚Ç¨")
    col3.markdown(f"<h4 style='color:{couleur_solde}; text-align:center;'>üí∞ Solde : {solde:.2f} ‚Ç¨</h4>", unsafe_allow_html=True)
    st.caption(f"üìä Calcul bas√© sur {len(selected_rows)} transaction(s) affich√©e(s).")




# Liste de cat√©gories valides connues (tu peux l‚Äô√©tendre √† volont√©)
KNOWN_CATEGORIES = [
    "essence", "alimentation", "supermarch√©", "carrefour", "auchan",
    "restaurant", "boulangerie", "loisirs", "sant√©", "logement", "transport"
]

def correct_category_name(name):
    """Corrige les fautes simples dans les noms de cat√©gorie/sous-cat√©gorie."""
    if not name:
        return name
    name = name.lower().strip()
    matches = get_close_matches(name, KNOWN_CATEGORIES, n=1, cutoff=0.8)
    return matches[0] if matches else name


# ==============================
# üìã MENU LAT√âRAL
# ==============================

with st.sidebar:
     st.title("üìÇ Menu principal")


    # Afficher la version actuelle
     if UPDATER_AVAILABLE:
        st.caption(f"Version : {get_current_version()}")
    
     page = st.radio(
        "Navigation",
        ["üí∏ Transactions", "üìä Voir Transactions", "‚öôÔ∏è Configuration", "üîÑ Mises √† jour"] ) # NOUVEAU
# ==============================
# üí∏ PAGE TRANSACTIONS
# ==============================
if page == "üí∏ Transactions":
    st.header("üí∏ Transactions")

    # Onglets pour les sous-parties
    tab1, tab2, tab3, tab4 = st.tabs([
        "üßæ Ajouter un ticket",
        "‚úçÔ∏è Ajouter une d√©pense manuelle",
        "üîÅ D√©pense r√©currente",
        "üí∞ Ajouter un revenu"
    ])

    with tab1:
        st.header("üì∏ Scanner les tickets automatiquement")
        st.info(f"D√©pose tes tickets √† scanner dans : `{TO_SCAN_DIR}`")
        process_all_tickets_in_folder()
    
    with tab2:
        interface_transaction_manuelle()

    with tab3:
        interface_transaction_recurrente()
    
    with tab4:
        interface_ajouter_revenu()

# ==============================
# üìä PAGE VOIR / G√âRER TRANSACTIONS
# ==============================
elif page == "üìä Voir Transactions":
    st.header("üìä Voir Transactions")

    # --- Onglets pour les sous-parties ---
    tab1, tab2, tab3 = st.tabs([
        "üìã Transactions",
        "üóëÔ∏è G√©rer les transactions",
        "üîÅ G√©rer les r√©currences"
    ])

    # === Onglet 1 : Visualisation ===
    with tab1:
        interface_voir_transactions()

    # === Onglet 2 : Suppression et gestion ===
    with tab2:
        interface_gerer_transactions()

    # === Onglet 3 : Gestion des r√©currences ===
    with tab3:
        interface_gerer_recurrences()


# ==============================
# ‚öôÔ∏è PAGE CONFIGURATION
# ==============================
elif page == "‚öôÔ∏è Configuration":
    interface_configuration_chemins()

# ==============================
# üîÑ AJOUTER UNE NOUVELLE PAGE "MISES √Ä JOUR"
# ==============================

# √Ä ajouter √† la fin du fichier, avant ou apr√®s la page Configuration

elif page == "üîÑ Mises √† jour":
    st.header("üîÑ Mises √† jour")
    
    # Onglets pour s√©parer les fonctionnalit√©s
    tab1, tab2 = st.tabs(["üîç V√©rifier les mises √† jour", "üìú Historique des versions"])
    
    # ===== ONGLET 1 : V√©rification des mises √† jour =====
    with tab1:
        if UPDATER_AVAILABLE:
            update_settings_ui()
        else:
            st.warning("‚ö†Ô∏è Le syst√®me de mise √† jour n'est pas disponible.")
            st.info("""
            **Pour activer les mises √† jour automatiques :**
            1. Assurez-vous que le fichier `auto_updater.py` est pr√©sent
            2. Installez les d√©pendances : `pip install requests`
            3. Relancez l'application
            """)
    
    # ===== ONGLET 2 : Historique des versions (NOUVEAU) =====
    with tab2:
        if CHANGELOG_AVAILABLE:
            display_changelog_page()
        else:
            st.warning("‚ö†Ô∏è L'affichage du changelog n'est pas disponible.")
            st.info("""
            **Pour activer l'historique des versions :**
            1. Assurez-vous que le fichier `changelog_viewer.py` est pr√©sent
            2. Relancez l'application
            """)
        
      