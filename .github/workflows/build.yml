name: üöÄ Build & Release Gestion Financi√®re Little

permissions:
  contents: write
  actions: read

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build et Release multi-plateforme
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: üß∞ Checkout du code
        uses: actions/checkout@v4

      - name: üêç Installer Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üì¶ Installer les d√©pendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: üì• Installer Tesseract OCR
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            # T√©l√©charger et installer Tesseract pour Windows
            choco install tesseract -y
            # Cr√©er le dossier tesseract local
            mkdir -p tesseract
            # Copier Tesseract depuis l'installation syst√®me
            cp -r "C:/Program Files/Tesseract-OCR/"* tesseract/ || true
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y tesseract-ocr tesseract-ocr-fra
            mkdir -p tesseract
            cp /usr/bin/tesseract tesseract/ || true
            cp -r /usr/share/tesseract-ocr tesseract/tessdata || true
          else
            brew install tesseract
            mkdir -p tesseract
            cp /usr/local/bin/tesseract tesseract/ || true
            cp -r /usr/local/share/tessdata tesseract/ || true
          fi
        shell: bash
      
      - name: üìù Cr√©er script de lancement pour Linux/macOS
        if: runner.os != 'Windows'
        run: |
          cat > dist/run.sh << 'RUNSCRIPT'
          #!/bin/bash
          # Script de lancement Gestion Financi√®re Little
          
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "  üöÄ Gestion Financi√®re Little"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""
          
          # D√©tection sp√©cifique de MX Linux et d√©riv√©s Debian
          detect_linux_distro() {
              if [ -f /etc/os-release ]; then
                  . /etc/os-release
                  echo "$NAME"
              elif command -v lsb_release &> /dev/null; then
                  lsb_release -d | cut -f2
              else
                  echo "Unknown"
              fi
          }
          
          DISTRO=$(detect_linux_distro)
          echo "üêß Distribution d√©tect√©e: $DISTRO"
          echo ""
          
          # Fonction pour trouver streamlit
          find_streamlit() {
              # Chercher streamlit dans les chemins communs
              local paths=(
                  "$HOME/.local/bin/streamlit"
                  "/usr/local/bin/streamlit" 
                  "/usr/bin/streamlit"
                  "$(which streamlit 2>/dev/null)"
                  "$(command -v streamlit 2>/dev/null)"
              )
              
              for path in "${paths[@]}"; do
                  if [ -f "$path" ] || [ -x "$path" ]; then
                      echo "$path"
                      return 0
                  fi
              done
              return 1
          }
          
          # V√©rifier Python
          if ! command -v python3 &> /dev/null; then
              echo "‚ö†Ô∏è  Python 3 n'est pas install√© sur votre syst√®me."
              echo ""
              read -p "‚ùì Voulez-vous que je l'installe automatiquement ? (o/N) " response
              
              if [[ "$response" =~ ^[OoYy]$ ]]; then
                  case "$DISTRO" in
                      *"Debian"*|*"Ubuntu"*|*"MX"*|*"Linux Mint"*)
                          sudo apt-get update || {
                              echo "‚ùå √âchec de la mise √† jour des paquets"
                              exit 1
                          }
                          sudo apt-get install -y python3 python3-pip python3-venv python3-full pipx || {
                              echo "‚ùå √âchec de l'installation automatique."
                              echo "üìã Essayez manuellement : sudo apt install python3 python3-pip python3-venv"
                              exit 1
                          }
                          ;;
                      *"Fedora"*|*"Red Hat"*|*"CentOS"*)
                          sudo dnf install -y python3 python3-pip python3-virtualenv pipx || {
                              echo "‚ùå √âchec de l'installation automatique."
                              echo "üìã Essayez manuellement : sudo dnf install python3 python3-pip"
                              exit 1
                          }
                          ;;
                      *"Arch"*|*"Manjaro"*)
                          sudo pacman -S --noconfirm python python-pip python-virtualenv pipx || {
                              echo "‚ùå √âchec de l'installation automatique."
                              echo "üìã Essayez manuellement : sudo pacman -S python python-pip"
                              exit 1
                          }
                          ;;
                      *"macOS"*|*"Darwin"*)
                          brew install python@3.11 pipx || {
                              echo "‚ùå √âchec de l'installation automatique."
                              echo "üìã Essayez manuellement : brew install python@3.11"
                              exit 1
                          }
                          ;;
                      *)
                          echo "‚ùå Distribution non support√©e pour l'installation automatique."
                          echo "üìã Installez Python manuellement pour votre distribution."
                          exit 1
                          ;;
                  esac
                  echo "‚úÖ Python install√© avec succ√®s !"
              else
                  echo ""
                  echo "üìã Installez Python manuellement, puis relancez ce script."
                  exit 1
              fi
          fi
          
          echo "‚úÖ Python d√©tect√©: $(python3 --version)"
          echo ""
          
          # V√©rifier si pipx est install√© et configur√©
          if command -v pipx &> /dev/null; then
              echo "üîß pipx d√©tect√©, v√©rification du PATH..."
              # V√©rifier si le PATH inclut ~/.local/bin
              if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
                  echo "üìù Mise √† jour du PATH pour pipx..."
                  pipx ensurepath
                  echo "üí° Fermez et rouvrez le terminal, ou ex√©cutez :"
                  echo "   source ~/.bashrc"
                  export PATH="$HOME/.local/bin:$PATH"
              fi
          fi
          
          # Solution pour MX Linux/Debian : utiliser pipx ou venv
          VENV_DIR=".venv"
          USE_PIPX=false
          
          # D'abord v√©rifier si streamlit est d√©j√† disponible
          STREAMLIT_PATH=$(find_streamlit)
          if [ -n "$STREAMLIT_PATH" ]; then
              echo "‚úÖ Streamlit trouv√© : $STREAMLIT_PATH"
              echo "üéØ Utilisation de Streamlit existant"
          else
              echo "üîç Streamlit non trouv√©, installation..."
              
              # Demander la m√©thode d'installation
              echo ""
              echo "üì¶ Choisissez la m√©thode d'installation :"
              echo "   1) Environnement virtuel (recommand√©)"
              echo "   2) pipx (installation globale)"
              read -p "   Votre choix [1/2] : " install_choice
              
              if [ "$install_choice" = "2" ]; then
                  USE_PIPX=true
              fi
              
              if [ "$USE_PIPX" = true ]; then
                  # M√©thode pipx
                  if ! command -v pipx &> /dev/null; then
                      echo "üì¶ Installation de pipx..."
                      case "$DISTRO" in
                          *"Debian"*|*"Ubuntu"*|*"MX"*|*"Linux Mint"*)
                              sudo apt-get install -y pipx || {
                                  echo "‚ùå Impossible d'installer pipx"
                                  exit 1
                              }
                              ;;
                          *"Fedora"*|*"Red Hat"*|*"CentOS"*)
                              sudo dnf install -y pipx || {
                                  echo "‚ùå Impossible d'installer pipx"
                                  exit 1
                              }
                              ;;
                          *"Arch"*|*"Manjaro"*)
                              sudo pacman -S --noconfirm pipx || {
                                  echo "‚ùå Impossible d'installer pipx"
                                  exit 1
                              }
                              ;;
                          *"macOS"*|*"Darwin"*)
                              brew install pipx || {
                                  echo "‚ùå Impossible d'installer pipx"
                                  exit 1
                              }
                              ;;
                      esac
                  fi
                  
                  echo "üì¶ Installation avec pipx..."
                  pipx ensurepath
                  export PATH="$HOME/.local/bin:$PATH"
                  pipx install streamlit pillow pytesseract pandas matplotlib || {
                      echo "‚ùå Erreur lors de l'installation avec pipx"
                      exit 1
                  }
                  echo "‚úÖ Streamlit install√© avec pipx !"
              else
                  # M√©thode environnement virtuel
                  if [ ! -d "$VENV_DIR" ]; then
                      echo "üì¶ Cr√©ation de l'environnement virtuel Python..."
                      
                      # V√©rifier si python3-venv est install√©
                      if ! python3 -c "import venv" 2>/dev/null; then
                          echo "‚ö†Ô∏è  Le module venv n'est pas disponible."
                          echo "üì¶ Installation de python3-venv..."
                          
                          case "$DISTRO" in
                              *"Debian"*|*"Ubuntu"*|*"MX"*|*"Linux Mint"*)
                                  sudo apt-get install -y python3-venv python3-full || {
                                      echo "‚ùå Impossible d'installer python3-venv"
                                      echo "üîÅ Retour √† la m√©thode pipx..."
                                      pipx install streamlit pillow pytesseract pandas matplotlib
                                      pipx ensurepath
                                      export PATH="$HOME/.local/bin:$PATH"
                                      USE_PIPX=true
                                  }
                                  ;;
                              *"Fedora"*|*"Red Hat"*|*"CentOS"*)
                                  sudo dnf install -y python3-virtualenv || {
                                      echo "‚ùå Impossible d'installer python3-virtualenv"
                                      exit 1
                                  }
                                  ;;
                              *"Arch"*|*"Manjaro"*)
                                  sudo pacman -S --noconfirm python-virtualenv || {
                                      echo "‚ùå Impossible d'installer python-virtualenv"
                                      exit 1
                                  }
                                  ;;
                          esac
                      fi
                      
                      if [ "$USE_PIPX" != true ]; then
                          python3 -m venv "$VENV_DIR" || {
                              echo "‚ùå Impossible de cr√©er l'environnement virtuel"
                              exit 1
                          }
                          echo "‚úÖ Environnement virtuel cr√©√© !"
                      fi
                  fi
                  
                  if [ "$USE_PIPX" != true ]; then
                      # Activer l'environnement virtuel
                      source "$VENV_DIR/bin/activate"
                      echo "‚úÖ Environnement virtuel activ√©"
                      
                      # Installer dans le venv
                      python -m pip install --upgrade pip --quiet
                      python -m pip install streamlit pillow pytesseract pandas matplotlib --quiet || {
                          echo "‚ùå Erreur lors de l'installation des d√©pendances"
                          exit 1
                      }
                      echo "‚úÖ Streamlit install√© dans l'environnement virtuel !"
                  fi
              fi
          fi
          
          # V√©rifier Tesseract OCR
          if ! command -v tesseract &> /dev/null; then
              echo "‚ö†Ô∏è  Tesseract OCR n'est pas install√© (optionnel pour OCR)."
              echo "   Pour l'installer :"
              case "$DISTRO" in
                  *"Debian"*|*"Ubuntu"*|*"MX"*|*"Linux Mint"*)
                      echo "   sudo apt install tesseract-ocr tesseract-ocr-fra"
                      ;;
                  *"Fedora"*|*"Red Hat"*|*"CentOS"*)
                      echo "   sudo dnf install tesseract tesseract-langpack-fra"
                      ;;
                  *"Arch"*|*"Manjaro"*)
                      echo "   sudo pacman -S tesseract tesseract-data-fra"
                      ;;
                  *"macOS"*|*"Darwin"*)
                      echo "   brew install tesseract tesseract-lang/fra"
                      ;;
              esac
              echo ""
          fi
          
          # Lancer l'application
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "  ‚ñ∂Ô∏è  Lancement de l'application..."
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""
          echo "üí° L'application va s'ouvrir dans votre navigateur"
          echo "üí° Pour arr√™ter : Fermez ce terminal (Ctrl+C)"
          echo ""
          
          sleep 2
          
          # D√©terminer comment lancer streamlit
          if [ "$USE_PIPX" = true ] || [ -n "$STREAMLIT_PATH" ]; then
              streamlit run gestiolittle.py --server.port 8501
          else
              python -m streamlit run gestiolittle.py --server.port 8501
          fi
          RUNSCRIPT
          
          chmod +x dist/run.sh
        shell: bash

      - name: üèóÔ∏è Compiler l'application (optimis√© antivirus)
        run: |
          # Cr√©er un fichier .spec optimis√©
          cat > gestiolittle.spec << 'EOF'
          # -*- mode: python ; coding: utf-8 -*-
          import os
          import glob
          
          block_cipher = None
          
          # Collecter tous les fichiers .py SAUF lancer_gestiolittle.py
          py_files = [f for f in glob.glob('*.py') if f != 'lancer_gestiolittle.py']
          datas_list = [(f, '.') for f in py_files]
          
          # Ajouter le dossier tesseract s'il existe
          if os.path.exists('tesseract'):
              datas_list.append(('tesseract', 'tesseract'))
          
          a = Analysis(
              ['lancer_gestiolittle.py'],
              pathex=[],
              binaries=[],
              datas=datas_list,
              hiddenimports=['streamlit'],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=['pytest', 'unittest', 'test', '_pytest', 'setuptools', 'pip', 'wheel'],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=block_cipher,
              noarchive=False,
          )
          
          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
          
          exe = EXE(
              pyz,
              a.scripts,
              a.binaries,
              a.zipfiles,
              a.datas,
              [],
              name='GestionFinanciereLittle',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=False,
              console=True,
              disable_windowed_traceback=False,
              argv_emulation=False,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
          )
          EOF
          
          # Compiler avec le .spec optimis√©
          pyinstaller gestiolittle.spec --clean --noconfirm
          
          # Copier gestiolittle.py et tesseract √† c√¥t√© de l'ex√©cutable
          cp gestiolittle.py dist/
          if [ -d "tesseract" ]; then
            cp -r tesseract dist/
          fi
        shell: bash

      - name: üì¶ Cr√©er le package de distribution
        run: |
          cd dist
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            7z a -tzip GestionFinanciereLittle-Windows.zip GestionFinanciereLittle.exe gestiolittle.py tesseract/
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            # Pour Linux : distribution du code source + script de lancement
            zip -r GestionFinanciereLittle-Linux.zip gestiolittle.py run.sh tesseract/
          else
            # Pour macOS : distribution du code source + script de lancement
            zip -r GestionFinanciereLittle-macOS.zip gestiolittle.py run.sh tesseract/
          fi
          cd ..
        shell: bash

      - name: üì§ Upload de l'ex√©cutable pour la Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: "Gestion Financi√®re Little v${{ github.run_number }}"
          body: |
            üöÄ Nouvelle version g√©n√©r√©e automatiquement.

            ## üì¶ T√©l√©chargements par Plateforme
            
            ### ü™ü Windows (Ex√©cutable Standalone)
            - `GestionFinanciereLittle-Windows.zip`
            - ‚úÖ Aucune installation requise
            - ‚ö†Ô∏è Extraire le ZIP et lancer le .exe
            
            ### üêß Linux (Script Python)
            - `GestionFinanciereLittle-Linux.zip`
            - üìã Pr√©requis : Python 3.11+
            - ‚ñ∂Ô∏è Lancer : `chmod +x run.sh && ./run.sh`
            
            ### üçé macOS (Script Python)
            - `GestionFinanciereLittle-macOS.zip`
            - üìã Pr√©requis : Python 3.11+
            - ‚ñ∂Ô∏è Lancer : `chmod +x run.sh && ./run.sh`
            
            ---
            
            üîè L'ex√©cutable Windows est sign√© num√©riquement.
            
            üìñ Voir le guide complet : [GUIDE_INSTALLATION.md](https://github.com/mdjabi2005-commits/gestion-financiere_little/blob/main/GUIDE_INSTALLATION.md)
          files: |
            dist/GestionFinanciereLittle*.zip
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
