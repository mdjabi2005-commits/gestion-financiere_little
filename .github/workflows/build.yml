name: üöÄ Build & Release Gestion Financi√®re Little

permissions:
  contents: write
  actions: read

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build et Release multi-plateforme
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: üß∞ Checkout du code
        uses: actions/checkout@v4

      - name: üêç Installer Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: üì• Installer Tesseract OCR pour Windows uniquement
        if: runner.os == 'Windows'
        run: |
          # T√©l√©charger et installer Tesseract pour Windows
          choco install tesseract -y
          # Cr√©er le dossier tesseract local
          mkdir -p tesseract
          # Copier Tesseract depuis l'installation syst√®me
          cp -r "C:/Program Files/Tesseract-OCR/"* tesseract/ || true
          echo "‚úÖ Tesseract install√© et copi√© pour Windows"
        shell: bash
      
      - name: üìù Cr√©er le dossier dist
        run: |
          mkdir -p dist
          echo "‚úÖ Dossier dist cr√©√©"
        shell: bash

      - name: üìù Cr√©er script de lancement pour Linux/macOS
        if: runner.os != 'Windows'
        run: |
          cat > dist/run.sh << 'RUNSCRIPT'
          #!/bin/bash
          # Script de lancement Gestion Financi√®re Little
          
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "  üöÄ Gestion Financi√®re Little"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""
          
          # D√©tection sp√©cifique de MX Linux et d√©riv√©s Debian
          detect_linux_distro() {
              if [ -f /etc/os-release ]; then
                  . /etc/os-release
                  # D√©tection sp√©cifique pour MX Linux
                  if [ -f /etc/mx-version ]; then
                      echo "MX Linux"
                  else
                      echo "$NAME"
                  fi
              elif command -v lsb_release &> /dev/null; then
                  lsb_release -d | cut -f2
              else
                  echo "Unknown"
              fi
          }
          
          DISTRO=$(detect_linux_distro)
          echo "üêß Distribution d√©tect√©e: $DISTRO"
          echo ""
          
          # Fonction pour installer Tesseract OCR
          install_tesseract() {
              echo "üì¶ Installation de Tesseract OCR..."
              case "$DISTRO" in
                  *"Debian"*|*"Ubuntu"*|*"MX"*|*"Linux Mint"*)
                      sudo apt-get update
                      sudo apt-get install -y tesseract-ocr tesseract-ocr-fra || {
                          echo "‚ùå Impossible d'installer Tesseract OCR"
                          return 1
                      }
                      ;;
                  *"Fedora"*|*"Red Hat"*|*"CentOS"*)
                      sudo dnf install -y tesseract tesseract-langpack-fra || {
                          echo "‚ùå Impossible d'installer Tesseract OCR"
                          return 1
                      }
                      ;;
                  *"Arch"*|*"Manjaro"*)
                      sudo pacman -S --noconfirm tesseract tesseract-data-fra || {
                          echo "‚ùå Impossible d'installer Tesseract OCR"
                          return 1
                      }
                      ;;
                  *"macOS"*|*"Darwin"*)
                      if ! command -v brew &> /dev/null; then
                          echo "üì¶ Installation de Homebrew..."
                          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
                      fi
                      brew install tesseract tesseract-lang/fra || {
                          echo "‚ùå Impossible d'installer Tesseract OCR"
                          return 1
                      }
                      ;;
              esac
              echo "‚úÖ Tesseract OCR install√© avec succ√®s !"
              return 0
          }

          # Fonction pour installer les d√©pendances OpenCV
          install_opencv_deps() {
              echo "üì¶ Installation des d√©pendances OpenCV..."
              case "$DISTRO" in
                  *"Debian"*|*"Ubuntu"*|*"MX"*|*"Linux Mint"*)
                      sudo apt-get install -y libglib2.0-0 libsm6 libxrender1 libxext6 libgl1-mesa-glx || {
                          echo "‚ùå Impossible d'installer les d√©pendances OpenCV"
                          return 1
                      }
                      ;;
                  *"Fedora"*|*"Red Hat"*|*"CentOS"*)
                      sudo dnf install -y glib2 libSM libXrender libXext mesa-libGL || {
                          echo "‚ùå Impossible d'installer les d√©pendances OpenCV"
                          return 1
                      }
                      ;;
                  *"Arch"*|*"Manjaro"*)
                      sudo pacman -S --noconfirm glib2 libsm libxrender libxext mesa || {
                          echo "‚ùå Impossible d'installer les d√©pendances OpenCV"
                          return 1
                      }
                      ;;
              esac
              echo "‚úÖ D√©pendances OpenCV install√©es avec succ√®s !"
              return 0
          }
          
          # V√©rifier la version de Python
          check_python_version() {
              python3 -c "import sys; exit(0) if sys.version_info >= (3, 8) else exit(1)" || {
                  echo "‚ùå Python 3.8+ requis. Version actuelle: $(python3 --version)"
                  return 1
              }
              return 0
          }
          
          # V√©rifier Python
          if ! command -v python3 &> /dev/null; then
              echo "‚ö†Ô∏è  Python 3 n'est pas install√© sur votre syst√®me."
              echo ""
              read -p "‚ùì Voulez-vous que je l'installe automatiquement ? (o/N) " response
              
              if [[ "$response" =~ ^[OoYy]$ ]]; then
                  case "$DISTRO" in
                      *"Debian"*|*"Ubuntu"*|*"MX"*|*"Linux Mint"*)
                          sudo apt-get update || {
                              echo "‚ùå √âchec de la mise √† jour des paquets"
                              exit 1
                          }
                          sudo apt-get install -y python3 python3-pip python3-venv python3-full || {
                              echo "‚ùå √âchec de l'installation automatique."
                              echo "üìã Essayez manuellement : sudo apt install python3 python3-pip python3-venv"
                              exit 1
                          }
                          ;;
                      *"Fedora"*|*"Red Hat"*|*"CentOS"*)
                          sudo dnf install -y python3 python3-pip python3-virtualenv || {
                              echo "‚ùå √âchec de l'installation automatique."
                              echo "üìã Essayez manuellement : sudo dnf install python3 python3-pip"
                              exit 1
                          }
                          ;;
                      *"Arch"*|*"Manjaro"*)
                          sudo pacman -S --noconfirm python python-pip python-virtualenv || {
                              echo "‚ùå √âchec de l'installation automatique."
                              echo "üìã Essayez manuellement : sudo pacman -S python python-pip"
                              exit 1
                          }
                          ;;
                      *"macOS"*|*"Darwin"*)
                          if ! command -v brew &> /dev/null; then
                              echo "üì¶ Installation de Homebrew..."
                              /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
                          fi
                          brew install python@3.11 || {
                              echo "‚ùå √âchec de l'installation automatique."
                              echo "üìã Essayez manuellement : brew install python@3.11"
                              exit 1
                          }
                          ;;
                      *)
                          echo "‚ùå Distribution non support√©e pour l'installation automatique."
                          echo "üìã Installez Python manuellement pour votre distribution."
                          exit 1
                          ;;
                  esac
                  echo "‚úÖ Python install√© avec succ√®s !"
              else
                  echo ""
                  echo "üìã Installez Python manuellement, puis relancez ce script."
                  exit 1
              fi
          fi
          
          # V√©rifier la version de Python
          check_python_version || exit 1
          echo "‚úÖ Python d√©tect√©: $(python3 --version)"
          echo ""
          
          # V√©rifier et installer Tesseract OCR
          if ! command -v tesseract &> /dev/null; then
              echo "üîç Tesseract OCR non d√©tect√©."
              echo ""
              read -p "‚ùì Voulez-vous installer Tesseract OCR (n√©cessaire pour l'OCR) ? (O/n) " tesseract_response
              
              if [[ "$tesseract_response" =~ ^[OoYy]*$ ]] || [ -z "$tesseract_response" ]; then
                  install_tesseract || {
                      echo "‚ö†Ô∏è  Tesseract OCR n'est pas install√©. L'OCR ne fonctionnera pas."
                  }
              else
                  echo "‚ö†Ô∏è  Tesseract OCR non install√©. L'OCR ne fonctionnera pas."
              fi
          else
              echo "‚úÖ Tesseract OCR d√©tect√©: $(tesseract --version | head -n1)"
          fi

          # Installer les d√©pendances OpenCV
          echo ""
          echo "üîç Installation des d√©pendances OpenCV..."
          install_opencv_deps || {
              echo "‚ö†Ô∏è  Les d√©pendances OpenCV ne sont pas install√©es. Certaines fonctionnalit√©s peuvent ne pas fonctionner."
          }
          echo ""
          
          # Utilisation d'un environnement virtuel
          VENV_DIR=".little_finance_env"
          echo "üîß Configuration de l'environnement Python..."
          
          # V√©rifier si l'environnement existe d√©j√†
          if [ ! -d "$VENV_DIR" ]; then
              echo "üì¶ Cr√©ation de l'environnement virtuel Python..."
              
              # V√©rifier si python3-venv est install√©
              if ! python3 -c "import venv" 2>/dev/null; then
                  echo "‚ö†Ô∏è  Le module venv n'est pas disponible."
                  echo "üì¶ Installation de python3-venv..."
                  
                  case "$DISTRO" in
                      *"Debian"*|*"Ubuntu"*|*"MX"*|*"Linux Mint"*)
                          sudo apt-get install -y python3-venv python3-full || {
                              echo "‚ùå Impossible d'installer python3-venv"
                              echo "üí° Essayez: sudo apt install python3-venv python3-full"
                              exit 1
                          }
                          ;;
                      *"Fedora"*|*"Red Hat"*|*"CentOS"*)
                          sudo dnf install -y python3-virtualenv || {
                              echo "‚ùå Impossible d'installer python3-virtualenv"
                              exit 1
                          }
                          ;;
                      *"Arch"*|*"Manjaro"*)
                          sudo pacman -S --noconfirm python-virtualenv || {
                              echo "‚ùå Impossible d'installer python-virtualenv"
                              exit 1
                          }
                          ;;
                      *"macOS"*|*"Darwin"*)
                          echo "‚úÖ venv devrait √™tre disponible avec Python"
                          ;;
                  esac
              fi
              
              python3 -m venv "$VENV_DIR" || {
                  echo "‚ùå Impossible de cr√©er l'environnement virtuel"
                  exit 1
              }
              echo "‚úÖ Environnement virtuel cr√©√© !"
          else
              echo "‚úÖ Environnement virtuel existant d√©tect√©"
          fi
          
          # Activer l'environnement virtuel
          source "$VENV_DIR/bin/activate"
          echo "‚úÖ Environnement virtuel activ√©"
          
          # Installation de TOUTES les d√©pendances Python
          echo "üì¶ Installation des d√©pendances Python..."
          python -m pip install --upgrade pip --quiet
          python -m pip install streamlit pandas pytesseract Pillow python-dateutil opencv-python-headless numpy matplotlib pdfminer.six requests --quiet || {
              echo "‚ùå Erreur lors de l'installation des d√©pendances"
              echo "üîÅ Nouvelle tentative avec des options √©tendues..."
              python -m pip install streamlit pandas pytesseract Pillow python-dateutil opencv-python-headless numpy matplotlib pdfminer.six requests --no-cache-dir || {
                  echo "‚ùå √âchec critique de l'installation des d√©pendances"
                  exit 1
              }
          }
          echo "‚úÖ D√©pendances install√©es dans l'environnement virtuel !"
          
          # V√©rification CRITIQUE que pytesseract est bien install√©
          echo "üîç V√©rification de l'installation de pytesseract..."
          python -c "import pytesseract; print('‚úÖ pytesseract import√© avec succ√®s')" || {
              echo "‚ùå pytesseract non install√©, tentative de r√©installation..."
              python -m pip install pytesseract --force-reinstall --no-cache-dir || {
                  echo "‚ùå √âchec critique de l'installation de pytesseract"
                  echo "üí° Le module OCR ne fonctionnera pas"
              }
          }

          # V√©rification de OpenCV
          echo "üîç V√©rification de l'installation de OpenCV..."
          python -c "import cv2; print('‚úÖ OpenCV import√© avec succ√®s')" || {
              echo "‚ùå OpenCV non install√©, tentative de r√©installation..."
              python -m pip install opencv-python-headless --force-reinstall --no-cache-dir || {
                  echo "‚ùå √âchec critique de l'installation de OpenCV"
                  echo "üí° Le traitement d'image ne fonctionnera pas"
              }
          }
          
          # V√©rification finale de toutes les d√©pendances
          echo "üîç V√©rification finale des d√©pendances..."
          python -c "
          try:
              import streamlit
              import pandas
              import pytesseract
              import PIL
              import dateutil
              import cv2
              import numpy
              import matplotlib
              import requests
              print('‚úÖ Toutes les d√©pendances sont install√©es avec succ√®s!')
          except ImportError as e:
              print(f'‚ùå Erreur d\\'import: {e}')
              exit(1)
          " || {
              echo "‚ùå Certaines d√©pendances ne sont pas correctement install√©es"
              exit 1
          }
          
          # Lancer l'application
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "  ‚ñ∂Ô∏è  Lancement de l'application..."
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""
          echo "üí° L'application va s'ouvrir dans votre navigateur"
          echo "üí° Pour arr√™ter : Fermez ce terminal (Ctrl+C)"
          echo "üí° Environnement: $VENV_DIR"
          echo ""
          
          sleep 2
          
          # Lancer Streamlit depuis l'environnement virtuel
          python -m streamlit run gestiolittle.py --server.port 8501 --server.headless true

          # Si Streamlit se ferme (erreur ou arr√™t manuel)
          echo ""
          echo "üîß Pour relancer l'application plus tard :"
          echo "   ./run.sh"
          echo ""
          RUNSCRIPT
          
          chmod +x dist/run.sh
          echo "‚úÖ Script run.sh cr√©√© avec succ√®s"
        shell: bash

      - name: üèóÔ∏è Compiler l'application (optimis√© antivirus)
        run: |
          # Installer pyinstaller uniquement pour la compilation
          python -m pip install pyinstaller
          
          # üî• CORRECTION : Utiliser lancer_gestiolittle.spec existant ou cr√©er un fallback
          if [ -f "lancer_gestiolittle.spec" ]; then
            echo "üìã Utilisation de lancer_gestiolittle.spec existant..."
            pyinstaller lancer_gestiolittle.spec --clean --noconfirm
          else
            echo "üìã Cr√©ation d'un .spec de secours..."
            # Cr√©er un fichier .spec optimis√©
            cat > gestiolittle.spec << 'EOF'
          # -*- mode: python ; coding: utf-8 -*-
          import os
          import glob
          
          block_cipher = None
          
          # Collecter tous les fichiers .py n√©cessaires
          py_files = []
          
          # Ajouter gestiolittle.py
          if os.path.exists('app/gestiolittle.py'):
              py_files.append(('app/gestiolittle.py', '.'))
          
          # üî• CRITIQUE : Ajouter configlittle.py
          if os.path.exists('app/configlittle.py'):
              py_files.append(('app/configlittle.py', '.'))
          
          # Ajouter auto_updater.py
          if os.path.exists('app/auto_updater.py'):
              py_files.append(('app/auto_updater.py', '.'))
          
          # Ajouter changelog_viewer.py
          if os.path.exists('app/changelog_viewer.py'):
              py_files.append(('app/changelog_viewer.py', '.'))
          
          # Ajouter le dossier tesseract s'il existe (uniquement pour Windows)
          if os.path.exists('tesseract'):
              py_files.append(('tesseract', 'tesseract'))
          
          a = Analysis(
              ['app/lancer_gestiolittle.py'],
              pathex=['app'],
              binaries=[],
              datas=py_files,
              hiddenimports=['streamlit', 'configlittle', 'auto_updater', 'changelog_viewer', 'pandas', 'pytesseract', 'PIL', 'cv2', 'numpy', 'dateutil', 'requests'],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=['pytest', 'unittest', 'test', '_pytest', 'setuptools', 'pip', 'wheel'],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=block_cipher,
              noarchive=False,
          )
          
          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
          
          exe = EXE(
              pyz,
              a.scripts,
              a.binaries,
              a.zipfiles,
              a.datas,
              [],
              name='GestionFinanciereLittle',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=False,
              console=True,
              disable_windowed_traceback=False,
              argv_emulation=False,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
          )
          EOF
            
            # Compiler avec le .spec de secours
            pyinstaller gestiolittle.spec --clean --noconfirm
          fi
          
          # üî• CORRECTION WINDOWS : Copier TOUS les fichiers Python √† c√¥t√© de l'exe
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "üì¶ Copie des modules Python √† c√¥t√© de l'ex√©cutable..."
            cp app/configlittle.py dist/ || echo "‚ö†Ô∏è configlittle.py non copi√©"
            cp app/auto_updater.py dist/ || echo "‚ö†Ô∏è auto_updater.py non copi√©"
            cp app/changelog_viewer.py dist/ || echo "‚ö†Ô∏è changelog_viewer.py non copi√©"
            cp app/gestiolittle.py dist/ || echo "‚ö†Ô∏è gestiolittle.py non copi√©"
            
            # Copier tesseract
            if [ -d "tesseract" ]; then
              cp -r tesseract dist/
              echo "‚úÖ Tesseract copi√©"
            fi
            
            # V√©rifier que tous les fichiers sont pr√©sents
            echo "üîç V√©rification des fichiers dans dist/ :"
            ls -la dist/*.py || echo "‚ö†Ô∏è Aucun fichier .py trouv√© dans dist/"
          fi
          
          echo "‚úÖ Application compil√©e avec succ√®s"
          
        shell: bash


      - name: ‚öôÔ∏è Ajouter installateur automatique Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "ü™Ñ Copie de l'installateur PowerShell et du launcher .bat depuis le d√©p√¥t..."
          mkdir -p dist
          cp app/install_and_run_windows.ps1 dist/ || { echo "‚ùå Fichier app/install_and_run_windows.ps1 introuvable"; exit 1; }
          cp app/Lancer_GFL.bat               dist/ || { echo "‚ùå Fichier app/Lancer_GFL.bat introuvable"; exit 1; }
          echo "‚úÖ Installateur et launcher copi√©s dans dist/"



      - name: üì¶ Cr√©er le package de distribution
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cd dist
            # V√©rifier la pr√©sence du fichier principal et du launcher
            if [ ! -f "GestionFinanciereLittle.exe" ]; then
              echo "‚ùå Erreur : ex√©cutable non trouv√© dans dist/"
              exit 1
            fi

            # V√©rifier que tous les fichiers Python critiques sont pr√©sents
            echo "üîç V√©rification des fichiers Python critiques..."
            [ -f "configlittle.py" ] && echo "‚úÖ configlittle.py pr√©sent" || echo "‚ùå configlittle.py MANQUANT"
            [ -f "gestiolittle.py" ] && echo "‚úÖ gestiolittle.py pr√©sent" || echo "‚ùå gestiolittle.py MANQUANT"
            [ -f "auto_updater.py" ] && echo "‚úÖ auto_updater.py pr√©sent" || echo "‚ùå auto_updater.py MANQUANT"
            [ -f "changelog_viewer.py" ] && echo "‚úÖ changelog_viewer.py pr√©sent" || echo "‚ùå changelog_viewer.py MANQUANT"

            # V√©rifier et inclure le dossier tesseract si pr√©sent
            if [ -d "tesseract" ]; then
              echo "üì¶ Inclusion du dossier tesseract et des fichiers d‚Äôinstallation..."
              7z a -tzip GestionFinanciereLittle-Windows.zip GestionFinanciereLittle.exe *.py *.bat *.ps1 tesseract/
            else
              echo "üì¶ Cr√©ation du ZIP avec les fichiers d‚Äôinstallation..."
              7z a -tzip GestionFinanciereLittle-Windows.zip GestionFinanciereLittle.exe *.py *.bat *.ps1
            fi

            echo "üìÅ V√©rification du contenu du ZIP final..."
            7z l GestionFinanciereLittle-Windows.zip

            cd ..
            echo "‚úÖ Package Windows cr√©√© avec succ√®s"
          
          elif [[ "$RUNNER_OS" == "Linux" ]] || [[ "$RUNNER_OS" == "macOS" ]]; then
            # Linux/macOS : Copier TOUS les fichiers Python n√©cessaires
            for file in app/*.py; do
              if [ -f "$file" ]; then
                cp "$file" dist/
                echo "üìÑ Copi√©: $file"
              fi
            done
            cd dist
            if [[ "$RUNNER_OS" == "Linux" ]]; then
              zip -r GestionFinanciereLittle-Linux.zip *.py run.sh
              echo "‚úÖ Package Linux cr√©√© avec tous les fichiers Python"
            else
              zip -r GestionFinanciereLittle-macOS.zip *.py run.sh
              echo "‚úÖ Package macOS cr√©√© avec tous les fichiers Python"
            fi
            cd ..
          fi
        shell: bash

      - name: üî¢ Lire la version depuis VERSION.txt
        id: ver
        run: |
          if [ ! -f version.txt ]; then
            echo "VERSION=0.0.0" >> $GITHUB_ENV
          else
            V=$(cat version.txt | tr -d ' \r\n')
            echo "VERSION=$V" >> $GITHUB_ENV
          fi

      - name: üìù G√©n√©rer titre + notes (conventional commits)
        id: notes
        run: |
          set -e

          # Dernier tag (ou vide si aucun)
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            RANGE="${LAST_TAG}..HEAD"
          else
            RANGE="HEAD"
          fi

          # R√©cup√©rer les messages de commit
          git log --pretty=format:%s $RANGE > /tmp/commits.txt || true

          # Flags par type
          HAS_BREAK=$(grep -Ei '(^.*!|BREAKING CHANGE:)' /tmp/commits.txt || true)
          HAS_FEAT=$(grep -Ei '^feat(\(|:)' /tmp/commits.txt || true)
          HAS_FIX=$(grep -Ei '^fix(\(|:)' /tmp/commits.txt || true)
          HAS_PERF=$(grep -Ei '^perf(\(|:)' /tmp/commits.txt || true)
          HAS_REFACTOR=$(grep -Ei '^refactor(\(|:)' /tmp/commits.txt || true)
          HAS_DOCS=$(grep -Ei '^docs(\(|:)' /tmp/commits.txt || true)
          HAS_CHORE=$(grep -Ei '^chore(\(|:)' /tmp/commits.txt || true)

          # Titre dynamique
          TITLE="üîß Maintenance"
          if [ -n "$HAS_BREAK" ]; then
            TITLE="üí• Changements majeurs"
          elif [ -n "$HAS_FEAT" ] && [ -n "$HAS_FIX" ]; then
            TITLE="‚ú® Nouvelles fonctionnalit√©s & üêõ Corrections"
          elif [ -n "$HAS_FEAT" ]; then
            TITLE="‚ú® Nouvelles fonctionnalit√©s"
          elif [ -n "$HAS_FIX" ]; then
            TITLE="üêõ Corrections de bugs"
          elif [ -n "$HAS_PERF" ]; then
            TITLE="‚ö° Am√©liorations de performances"
          elif [ -n "$HAS_REFACTOR" ]; then
            TITLE="üßπ Refactor"
          elif [ -n "$HAS_DOCS" ]; then
            TITLE="üìù Documentation"
          fi

          # Corps : regrouper par section
          body() {
            SEC="$1"; PAT="$2"
            MATCHES=$(grep -E "$PAT" /tmp/commits.txt | sed -E 's/^[a-z]+(\([^)]+\))?:\s*//')
            if [ -n "$MATCHES" ]; then
              echo "### $SEC"
              echo "$MATCHES" | sed 's/^/- /'
              echo
            fi
          }

          {
            echo "## ${TITLE} ‚Äî v${{ env.VERSION }}"
            echo
            [ -n "$HAS_BREAK" ] && echo "### üí• Breaking changes" && \
              grep -Ei '(^.*!|BREAKING CHANGE:)' /tmp/commits.txt | sed 's/^/- /' && echo
            body "‚ú® Features" '^feat(\(|:)'
            body "üêõ Fixes" '^fix(\(|:)'
            body "‚ö° Perf" '^perf(\(|:)'
            body "üßπ Refactor" '^refactor(\(|:)'
            body "üìù Docs" '^docs(\(|:)'
            body "üîß Chore" '^chore(\(|:)'
          } > /tmp/release_notes.md

          echo "title=${TITLE}" >> $GITHUB_OUTPUT

      - name: üì§ Upload de l'ex√©cutable pour la Release (DRAFT)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: "Gestion Financi√®re Little v${{ env.VERSION }} ‚Äî ${{ steps.notes.outputs.title }}"
          draft: true
          prerelease: false
          body_path: /tmp/release_notes.md
          files: |
            dist/GestionFinanciereLittle*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
