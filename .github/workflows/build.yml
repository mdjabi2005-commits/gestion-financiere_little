name: 🚀 Build & Release Gestion Financière Little

permissions:
  contents: write
  actions: read

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build et Release multi-plateforme
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: 🧰 Checkout du code
        uses: actions/checkout@v4

      - name: 🐍 Installer Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Installer les dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: 📥 Installer Tesseract OCR
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            # Télécharger et installer Tesseract pour Windows
            choco install tesseract -y
            # Créer le dossier tesseract local
            mkdir -p tesseract
            # Copier Tesseract depuis l'installation système
            cp -r "C:/Program Files/Tesseract-OCR/"* tesseract/ || true
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y tesseract-ocr tesseract-ocr-fra
            mkdir -p tesseract
            cp /usr/bin/tesseract tesseract/ || true
            cp -r /usr/share/tesseract-ocr tesseract/tessdata || true
          else
            brew install tesseract
            mkdir -p tesseract
            cp /usr/local/bin/tesseract tesseract/ || true
            cp -r /usr/local/share/tessdata tesseract/ || true
          fi
        shell: bash
      
      - name: 📝 Créer script de lancement pour Linux/macOS
        if: runner.os != 'Windows'
        run: |
          cat > dist/run.sh << 'RUNSCRIPT'
          #!/bin/bash
          # Script de lancement Gestion Financière Little
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "  🚀 Gestion Financière Little"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          
          # Fonction pour installer Python sur différentes distributions
          install_python() {
              echo "🔧 Tentative d'installation automatique de Python..."
              
              if command -v apt-get &> /dev/null; then
                  # Debian/Ubuntu
                  echo "📦 Détection : Debian/Ubuntu"
                  sudo apt-get update
                  sudo apt-get install -y python3 python3-pip python3-venv
              elif command -v dnf &> /dev/null; then
                  # Fedora/RHEL
                  echo "📦 Détection : Fedora/RHEL"
                  sudo dnf install -y python3 python3-pip
              elif command -v pacman &> /dev/null; then
                  # Arch Linux
                  echo "📦 Détection : Arch Linux"
                  sudo pacman -S --noconfirm python python-pip
              elif command -v brew &> /dev/null; then
                  # macOS avec Homebrew
                  echo "📦 Détection : macOS (Homebrew)"
                  brew install python@3.11
              else
                  return 1
              fi
              return 0
          }
          
          # Vérifier Python
          if ! command -v python3 &> /dev/null; then
              echo "⚠️  Python 3 n'est pas installé sur votre système."
              echo ""
              read -p "❓ Voulez-vous que je l'installe automatiquement ? (o/N) " response
              
              if [[ "$response" =~ ^[OoYy]$ ]]; then
                  if install_python; then
                      echo "✅ Python installé avec succès !"
                  else
                      echo "❌ Installation automatique impossible."
                      echo ""
                      echo "📋 Installez Python manuellement :"
                      echo "   • Ubuntu/Debian: sudo apt install python3 python3-pip"
                      echo "   • Fedora: sudo dnf install python3 python3-pip"
                      echo "   • Arch: sudo pacman -S python python-pip"
                      echo "   • macOS: brew install python@3.11"
                      echo "   • Ou téléchargez sur: https://www.python.org/downloads/"
                      echo ""
                      read -p "Appuyez sur Entrée pour fermer..."
                      exit 1
                  fi
              else
                  echo ""
                  echo "📋 Installez Python manuellement, puis relancez ce script."
                  echo "   Téléchargez Python sur: https://www.python.org/downloads/"
                  echo ""
                  read -p "Appuyez sur Entrée pour fermer..."
                  exit 1
              fi
          fi
          
          echo "✅ Python détecté: $(python3 --version)"
          echo ""
          
          # Vérifier/Installer Streamlit
          if ! python3 -c "import streamlit" &> /dev/null; then
              echo "📦 Installation de Streamlit et dépendances..."
              python3 -m pip install --user streamlit pillow pytesseract pandas matplotlib || {
                  echo "❌ Erreur lors de l'installation des dépendances"
                  read -p "Appuyez sur Entrée pour fermer..."
                  exit 1
              }
              echo "✅ Streamlit installé !"
              echo ""
          fi
          
          # Vérifier Tesseract OCR
          if ! command -v tesseract &> /dev/null; then
              echo "⚠️  Tesseract OCR n'est pas installé (optionnel pour OCR)."
              echo "   Pour l'installer :"
              echo "   • Ubuntu/Debian: sudo apt install tesseract-ocr"
              echo "   • Fedora: sudo dnf install tesseract"
              echo "   • macOS: brew install tesseract"
              echo ""
          fi
          
          # Lancer l'application
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "  ▶️  Lancement de l'application..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "💡 L'application va s'ouvrir dans votre navigateur"
          echo "💡 Pour arrêter : Fermez ce terminal (Ctrl+C)"
          echo ""
          
          sleep 2
          python3 -m streamlit run gestiolittle.py --server.port 8501
          RUNSCRIPT
          
          chmod +x dist/run.sh
        shell: bash

      - name: 🏗️ Compiler l'application (optimisé antivirus)
        run: |
          # Créer un fichier .spec optimisé
          cat > gestiolittle.spec << 'EOF'
          # -*- mode: python ; coding: utf-8 -*-
          import os
          import glob
          
          block_cipher = None
          
          # Collecter tous les fichiers .py SAUF lancer_gestiolittle.py
          py_files = [f for f in glob.glob('*.py') if f != 'lancer_gestiolittle.py']
          datas_list = [(f, '.') for f in py_files]
          
          # Ajouter le dossier tesseract s'il existe
          if os.path.exists('tesseract'):
              datas_list.append(('tesseract', 'tesseract'))
          
          a = Analysis(
              ['lancer_gestiolittle.py'],
              pathex=[],
              binaries=[],
              datas=datas_list,
              hiddenimports=['streamlit'],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=['pytest', 'unittest', 'test', '_pytest', 'setuptools', 'pip', 'wheel'],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=block_cipher,
              noarchive=False,
          )
          
          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
          
          exe = EXE(
              pyz,
              a.scripts,
              a.binaries,
              a.zipfiles,
              a.datas,
              [],
              name='GestionFinanciereLittle',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=False,
              console=True,
              disable_windowed_traceback=False,
              argv_emulation=False,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
          )
          EOF
          
          # Compiler avec le .spec optimisé
          pyinstaller gestiolittle.spec --clean --noconfirm
          
          # Copier gestiolittle.py et tesseract à côté de l'exécutable
          cp gestiolittle.py dist/
          if [ -d "tesseract" ]; then
            cp -r tesseract dist/
          fi
        shell: bash

      # 📦 Créer un package complet avec l'exe et les fichiers nécessaires
      - name: 📦 Créer le package de distribution
        run: |
          cd dist
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            7z a -tzip GestionFinanciereLittle-Windows.zip GestionFinanciereLittle.exe gestiolittle.py tesseract/
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            # Pour Linux : distribution du code source + script de lancement
            zip -r GestionFinanciereLittle-Linux.zip gestiolittle.py run.sh tesseract/
          else
            # Pour macOS : distribution du code source + script de lancement
            zip -r GestionFinanciereLittle-macOS.zip gestiolittle.py run.sh tesseract/
          fi
          cd ..
        shell: bash

      # 📤 Création de la release GitHub
      - name: 📤 Upload de l'exécutable pour la Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: "Gestion Financière Little v${{ github.run_number }}"
          body: |
            🚀 Nouvelle version générée automatiquement.

            ## 📦 Téléchargements par Plateforme
            
            ### 🪟 Windows (Exécutable Standalone)
            - `GestionFinanciereLittle-Windows.zip`
            - ✅ Aucune installation requise
            - ⚠️ Extraire le ZIP et lancer le .exe
            
            ### 🐧 Linux (Script Python)
            - `GestionFinanciereLittle-Linux.zip`
            - 📋 Prérequis : Python 3.11+
            - ▶️ Lancer : `chmod +x run.sh && ./run.sh`
            
            ### 🍎 macOS (Script Python)
            - `GestionFinanciereLittle-macOS.zip`
            - 📋 Prérequis : Python 3.11+
            - ▶️ Lancer : `chmod +x run.sh && ./run.sh`
            
            ---
            
            🔏 L'exécutable Windows est signé numériquement.
            
            📖 Voir le guide complet : [GUIDE_INSTALLATION.md](https://github.com/mdjabi2005-commits/gestion-financiere_little/blob/main/GUIDE_INSTALLATION.md)
          files: |
            dist/GestionFinanciereLittle*.zip
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
