name: 🚀 Build & Release Gestion Financière Little

permissions:
  contents: write  # nécessaire pour créer les releases
  actions: read

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build et Release multi-plateforme
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: 🧰 Checkout du code
        uses: actions/checkout@v4

      - name: 🐍 Installer Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Installer les dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: 🏗️ Compiler l’application
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            pyinstaller --onefile lancer_gestiolittle.py
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            pyinstaller --onefile lancer_gestiolittle.py
          else
            pyinstaller --onefile lancer_gestiolittle.py
          fi
        shell: bash

      - name: 🧩 Installer Windows SDK pour obtenir signtool
        if: runner.os == 'Windows'
        run: choco install windows-sdk-10-version-2004-all -y

      - name: 🪪 Importer le certificat PFX
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $bytes = [System.Convert]::FromBase64String("${{ secrets.CODESIGN_PFX_BASE64 }}")
          [IO.File]::WriteAllBytes("codesign.pfx", $bytes)
      
      - name: 🔏 Signer l'exécutable Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # 🔍 Cherche signtool.exe dans la version x64 en priorité
          $signtool = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\" -Recurse -Filter signtool.exe |
            Where-Object { $_.FullName -match "\\x64\\" } |
            Select-Object -First 1 -ExpandProperty FullName

          if (-not $signtool) {
            Write-Host "⚠️ signtool.exe (x64) non trouvé, tentative de fallback général..."
            $signtool = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\" -Recurse -Filter signtool.exe |
              Select-Object -First 1 -ExpandProperty FullName
          }

          if (-not $signtool) {
            Write-Error "❌ Aucun signtool valide trouvé sur le système."
            exit 1
          }

          Write-Host "✅ signtool utilisé : $signtool"

          # 🪪 Signature du fichier
          Start-Process -FilePath $signtool -ArgumentList @(
            'sign', '/f', 'codesign.pfx', '/p', "${{ secrets.CODESIGN_PFX_PASSWORD }}",
            '/tr', 'http://timestamp.digicert.com', '/td', 'sha256', '/fd', 'sha256',
            'dist\lancer_gestiolittle.exe'
          ) -Wait

          Write-Host "✅ Signature terminée avec succès."


      - name: 📤 Upload de l’exécutable pour la Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: "Gestion Financière Little v${{ github.run_number }}"
          body: |
            🚀 Nouvelle version générée automatiquement.

            ✅ Compatible Windows, Linux et macOS.
            🔏 L’exécutable Windows est signé numériquement.
          files: |
            dist/lancer_gestiolittle*
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


