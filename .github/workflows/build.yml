name: 🚀 Build & Release Gestion Financière Little

permissions:
  contents: write
  actions: read

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build et Release multi-plateforme
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: 🧰 Checkout du code
        uses: actions/checkout@v4

      - name: 🐍 Installer Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Installer les dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: 📥 Installer Tesseract OCR
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            # Télécharger et installer Tesseract pour Windows
            choco install tesseract -y
            # Créer le dossier tesseract local
            mkdir -p tesseract
            # Copier Tesseract depuis l'installation système
            cp -r "C:/Program Files/Tesseract-OCR/"* tesseract/ || true
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            # Pour Linux : on installe Tesseract système mais on ne le copie PAS
            sudo apt-get update
            sudo apt-get install -y tesseract-ocr tesseract-ocr-fra
            echo "✅ Tesseract installé pour Linux (utilisation système)"
          else
            # Pour macOS : on installe Tesseract système mais on ne le copie PAS
            brew install tesseract
            echo "✅ Tesseract installé pour macOS (utilisation système)"
          fi
        shell: bash
      
      - name: 📝 Créer le dossier dist
        run: |
          mkdir -p dist
          echo "✅ Dossier dist créé"

      - name: 📝 Créer script de lancement pour Linux/macOS
        if: runner.os != 'Windows'
        run: |
          cat > dist/run.sh << 'RUNSCRIPT'
          #!/bin/bash
          # Script de lancement Gestion Financière Little
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "  🚀 Gestion Financière Little"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          
          # Détection spécifique de MX Linux et dérivés Debian
          detect_linux_distro() {
              if [ -f /etc/os-release ]; then
                  . /etc/os-release
                  # Détection spécifique pour MX Linux
                  if [ -f /etc/mx-version ]; then
                      echo "MX Linux"
                  else
                      echo "$NAME"
                  fi
              elif command -v lsb_release &> /dev/null; then
                  lsb_release -d | cut -f2
              else
                  echo "Unknown"
              fi
          }
          
          DISTRO=$(detect_linux_distro)
          echo "🐧 Distribution détectée: $DISTRO"
          echo ""
          
          # Fonction pour installer Tesseract OCR
          install_tesseract() {
              echo "📦 Installation de Tesseract OCR..."
              case "$DISTRO" in
                  *"Debian"*|*"Ubuntu"*|*"MX"*|*"Linux Mint"*)
                      sudo apt-get update
                      sudo apt-get install -y tesseract-ocr tesseract-ocr-fra || {
                          echo "❌ Impossible d'installer Tesseract OCR"
                          return 1
                      }
                      ;;
                  *"Fedora"*|*"Red Hat"*|*"CentOS"*)
                      sudo dnf install -y tesseract tesseract-langpack-fra || {
                          echo "❌ Impossible d'installer Tesseract OCR"
                          return 1
                      }
                      ;;
                  *"Arch"*|*"Manjaro"*)
                      sudo pacman -S --noconfirm tesseract tesseract-data-fra || {
                          echo "❌ Impossible d'installer Tesseract OCR"
                          return 1
                      }
                      ;;
                  *"macOS"*|*"Darwin"*)
                      # Vérifier si Homebrew est installé
                      if ! command -v brew &> /dev/null; then
                          echo "📦 Installation de Homebrew..."
                          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
                      fi
                      brew install tesseract tesseract-lang/fra || {
                          echo "❌ Impossible d'installer Tesseract OCR"
                          return 1
                      }
                      ;;
              esac
              echo "✅ Tesseract OCR installé avec succès !"
              return 0
          }
          
          # Vérifier la version de Python
          check_python_version() {
              python3 -c "import sys; exit(0) if sys.version_info >= (3, 8) else exit(1)" || {
                  echo "❌ Python 3.8+ requis. Version actuelle: $(python3 --version)"
                  return 1
              }
              return 0
          }
          
          # Vérifier Python
          if ! command -v python3 &> /dev/null; then
              echo "⚠️  Python 3 n'est pas installé sur votre système."
              echo ""
              read -p "❓ Voulez-vous que je l'installe automatiquement ? (o/N) " response
              
              if [[ "$response" =~ ^[OoYy]$ ]]; then
                  case "$DISTRO" in
                      *"Debian"*|*"Ubuntu"*|*"MX"*|*"Linux Mint"*)
                          sudo apt-get update || {
                              echo "❌ Échec de la mise à jour des paquets"
                              exit 1
                          }
                          sudo apt-get install -y python3 python3-pip python3-venv python3-full || {
                              echo "❌ Échec de l'installation automatique."
                              echo "📋 Essayez manuellement : sudo apt install python3 python3-pip python3-venv"
                              exit 1
                          }
                          ;;
                      *"Fedora"*|*"Red Hat"*|*"CentOS"*)
                          sudo dnf install -y python3 python3-pip python3-virtualenv || {
                              echo "❌ Échec de l'installation automatique."
                              echo "📋 Essayez manuellement : sudo dnf install python3 python3-pip"
                              exit 1
                          }
                          ;;
                      *"Arch"*|*"Manjaro"*)
                          sudo pacman -S --noconfirm python python-pip python-virtualenv || {
                              echo "❌ Échec de l'installation automatique."
                              echo "📋 Essayez manuellement : sudo pacman -S python python-pip"
                              exit 1
                          }
                          ;;
                      *"macOS"*|*"Darwin"*)
                          # Vérifier si Homebrew est installé
                          if ! command -v brew &> /dev/null; then
                              echo "📦 Installation de Homebrew..."
                              /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
                          fi
                          brew install python@3.11 || {
                              echo "❌ Échec de l'installation automatique."
                              echo "📋 Essayez manuellement : brew install python@3.11"
                              exit 1
                          }
                          ;;
                      *)
                          echo "❌ Distribution non supportée pour l'installation automatique."
                          echo "📋 Installez Python manuellement pour votre distribution."
                          exit 1
                          ;;
                  esac
                  echo "✅ Python installé avec succès !"
              else
                  echo ""
                  echo "📋 Installez Python manuellement, puis relancez ce script."
                  exit 1
              fi
          fi
          
          # Vérifier la version de Python
          check_python_version || exit 1
          echo "✅ Python détecté: $(python3 --version)"
          echo ""
          
          # Vérifier et installer Tesseract OCR
          if ! command -v tesseract &> /dev/null; then
              echo "🔍 Tesseract OCR non détecté."
              echo ""
              read -p "❓ Voulez-vous installer Tesseract OCR (nécessaire pour l'OCR) ? (O/n) " tesseract_response
              
              if [[ "$tesseract_response" =~ ^[OoYy]*$ ]] || [ -z "$tesseract_response" ]; then
                  install_tesseract || {
                      echo "⚠️  Tesseract OCR n'est pas installé. L'OCR ne fonctionnera pas."
                  }
              else
                  echo "⚠️  Tesseract OCR non installé. L'OCR ne fonctionnera pas."
              fi
          else
              echo "✅ Tesseract OCR détecté: $(tesseract --version | head -n1)"
          fi
          echo ""
          
          # SOLUTION AMÉLIORÉE : Utilisation OBLIGATOIRE d'un environnement virtuel
          VENV_DIR=".little_finance_env"
          echo "🔧 Configuration de l'environnement Python..."
          
          # Vérifier si l'environnement existe déjà
          if [ ! -d "$VENV_DIR" ]; then
              echo "📦 Création de l'environnement virtuel Python..."
              
              # Vérifier si python3-venv est installé
              if ! python3 -c "import venv" 2>/dev/null; then
                  echo "⚠️  Le module venv n'est pas disponible."
                  echo "📦 Installation de python3-venv..."
                  
                  case "$DISTRO" in
                      *"Debian"*|*"Ubuntu"*|*"MX"*|*"Linux Mint"*)
                          sudo apt-get install -y python3-venv python3-full || {
                              echo "❌ Impossible d'installer python3-venv"
                              echo "💡 Essayez: sudo apt install python3-venv python3-full"
                              exit 1
                          }
                          ;;
                      *"Fedora"*|*"Red Hat"*|*"CentOS"*)
                          sudo dnf install -y python3-virtualenv || {
                              echo "❌ Impossible d'installer python3-virtualenv"
                              exit 1
                          }
                          ;;
                      *"Arch"*|*"Manjaro"*)
                          sudo pacman -S --noconfirm python-virtualenv || {
                              echo "❌ Impossible d'installer python-virtualenv"
                              exit 1
                          }
                          ;;
                      *"macOS"*|*"Darwin"*)
                          # Sur macOS, venv est généralement inclus avec Python
                          echo "✅ venv devrait être disponible avec Python"
                          ;;
                  esac
              fi
              
              python3 -m venv "$VENV_DIR" || {
                  echo "❌ Impossible de créer l'environnement virtuel"
                  exit 1
              }
              echo "✅ Environnement virtuel créé !"
          else
              echo "✅ Environnement virtuel existant détecté"
          fi
          
          # Activer l'environnement virtuel
          source "$VENV_DIR/bin/activate"
          echo "✅ Environnement virtuel activé"
          
          # Installer les dépendances dans le venv
          echo "📦 Installation des dépendances Python..."
          python -m pip install --upgrade pip --quiet
          python -m pip install streamlit pillow pytesseract pandas matplotlib --quiet || {
              echo "❌ Erreur lors de l'installation des dépendances"
              echo "🔁 Nouvelle tentative avec des options étendues..."
              python -m pip install streamlit pillow pytesseract pandas matplotlib --no-cache-dir || {
                  echo "❌ Échec critique de l'installation des dépendances"
                  exit 1
              }
          }
          echo "✅ Dépendances installées dans l'environnement virtuel !"
          
          # Vérification CRITIQUE que pytesseract est bien installé
          echo "🔍 Vérification de l'installation de pytesseract..."
          python -c "import pytesseract; print('✅ pytesseract importé avec succès')" || {
              echo "❌ pytesseract non installé, tentative de réinstallation..."
              python -m pip install pytesseract --force-reinstall --no-cache-dir || {
                  echo "❌ Échec critique de l'installation de pytesseract"
                  echo "💡 Le module OCR ne fonctionnera pas"
              }
          }
          
          # Vérification finale de toutes les dépendances
          echo "🔍 Vérification finale des dépendances..."
          python -c "
          try:
              import streamlit
              import PIL
              import pytesseract
              import pandas
              import matplotlib
              print('✅ Toutes les dépendances sont installées avec succès!')
          except ImportError as e:
              print(f'❌ Erreur d\\'import: {e}')
              exit(1)
          " || {
              echo "❌ Certaines dépendances ne sont pas correctement installées"
              exit 1
          }
          
          # Lancer l'application
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "  ▶️  Lancement de l'application..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "💡 L'application va s'ouvrir dans votre navigateur"
          echo "💡 Pour arrêter : Fermez ce terminal (Ctrl+C)"
          echo "💡 Environnement: $VENV_DIR"
          echo ""
          
          sleep 2
          
          # Lancer Streamlit depuis l'environnement virtuel
          python -m streamlit run gestiolittle.py --server.port 8501 --server.headless true

          # Si Streamlit se ferme (erreur ou arrêt manuel)
          echo ""
          echo "🔧 Pour relancer l'application plus tard :"
          echo "   ./run.sh"
          echo ""
          RUNSCRIPT
          
          chmod +x dist/run.sh
          echo "✅ Script run.sh créé avec succès"

      - name: 🏗️ Compiler l'application (optimisé antivirus)
        run: |
          # Créer un fichier .spec optimisé
          cat > gestiolittle.spec << 'EOF'
          # -*- mode: python ; coding: utf-8 -*-
          import os
          import glob
          
          block_cipher = None
          
          # Collecter tous les fichiers .py SAUF lancer_gestiolittle.py
          py_files = [f for f in glob.glob('*.py') if f != 'lancer_gestiolittle.py']
          datas_list = [(f, '.') for f in py_files]
          
          # Ajouter le dossier tesseract s'il existe (uniquement pour Windows)
          if os.path.exists('tesseract'):
              datas_list.append(('tesseract', 'tesseract'))
          
          a = Analysis(
              ['lancer_gestiolittle.py'],
              pathex=[],
              binaries=[],
              datas=datas_list,
              hiddenimports=['streamlit'],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=['pytest', 'unittest', 'test', '_pytest', 'setuptools', 'pip', 'wheel'],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=block_cipher,
              noarchive=False,
          )
          
          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
          
          exe = EXE(
              pyz,
              a.scripts,
              a.binaries,
              a.zipfiles,
              a.datas,
              [],
              name='GestionFinanciereLittle',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=False,
              console=True,
              disable_windowed_traceback=False,
              argv_emulation=False,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
          )
          EOF
          
          # Compiler avec le .spec optimisé
          pyinstaller gestiolittle.spec --clean --noconfirm
          
          # Copier gestiolittle.py à côté de l'exécutable
          cp gestiolittle.py dist/
          
          # Copier tesseract UNIQUEMENT pour Windows
          if [[ "$RUNNER_OS" == "Windows" ]] && [ -d "tesseract" ]; then
            cp -r tesseract dist/
          fi
          echo "✅ Application compilée avec succès"

      - name: 📦 Créer le package de distribution
        run: |
          cd dist
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            # Windows : inclure Tesseract
            7z a -tzip GestionFinanciereLittle-Windows.zip GestionFinanciereLittle.exe gestiolittle.py tesseract/
            echo "✅ Package Windows créé"
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            # Linux : NE PAS inclure Tesseract (utilisation système)
            zip -r GestionFinanciereLittle-Linux.zip gestiolittle.py run.sh
            echo "✅ Package Linux créé"
          else
            # macOS : NE PAS inclure Tesseract (utilisation système)
            zip -r GestionFinanciereLittle-macOS.zip gestiolittle.py run.sh
            echo "✅ Package macOS créé"
          fi
          cd ..

      - name: 📤 Upload de l'exécutable pour la Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: "Gestion Financière Little v${{ github.run_number }}"
          body: |
            🚀 Nouvelle version générée automatiquement.
            ## 📦 Téléchargements par Plateforme
            
            ### 🪟 Windows (Exécutable Standalone)
            - `GestionFinanciereLittle-Windows.zip`
            - ✅ Aucune installation requise
            - ⚠️ Extraire le ZIP et lancer le .exe
            - 🔧 Tesseract OCR inclus
            
            ### 🐧 Linux (Script Python)
            - `GestionFinanciereLittle-Linux.zip`
            - 📋 Prérequis : Python 3.8+
            - ▶️ Lancer : `chmod +x run.sh && ./run.sh`
            - 🔧 Environnement virtuel automatique
            - 🐛 Résolution du problème "No module named pytesseract"
            
            ### 🍎 macOS (Script Python)
            - `GestionFinanciereLittle-macOS.zip`
            - 📋 Prérequis : Python 3.8+
            - ▶️ Lancer : `chmod +x run.sh && ./run.sh`
            - 🔧 Environnement virtuel automatique
            
            ---
            
            ## 🆕 Améliorations Linux/macOS
            - ✅ Environnement virtuel obligatoire (résout les problèmes d'import)
            - ✅ Meilleure détection de MX Linux
            - ✅ Vérification de version Python
            - ✅ Installation automatique de Homebrew sur macOS
            - ✅ Vérifications renforcées des dépendances
            
            🔏 L'exécutable Windows est signé numériquement.
            
            📖 Voir le guide complet : [GUIDE_INSTALLATION.md](https://github.com/mdjabi2005-commits/gestion-financiere_little/blob/main/GUIDE_INSTALLATION.md)
          files: |
            dist/GestionFinanciereLittle*.zip
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
