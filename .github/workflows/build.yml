name: üöÄ Build & Release Gestion Financi√®re Little

permissions:
  contents: write
  actions: read

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build et Release multi-plateforme
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: üß∞ Checkout du code
        uses: actions/checkout@v4

      - name: üêç Installer Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üì¶ Installer les d√©pendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: üèóÔ∏è Compiler l'application
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            pyinstaller --onefile lancer_gestiolittle.py
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            pyinstaller --onefile lancer_gestiolittle.py
          else
            pyinstaller --onefile lancer_gestiolittle.py
          fi
        shell: bash

      # üß© Installation du SDK Windows pour avoir signtool
      - name: üß© Installer Windows SDK pour obtenir signtool
        if: runner.os == 'Windows'
        run: choco install windows-sdk-10-version-2004-all -y

      # ü™™ Import du certificat de signature
      - name: ü™™ Importer le certificat PFX dans le store Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # D√©coder et sauvegarder le certificat
          $bytes = [System.Convert]::FromBase64String("${{ secrets.CODESIGN_PFX_BASE64 }}")
          $pfxPath = "codesign.pfx"
          [IO.File]::WriteAllBytes($pfxPath, $bytes)
          
          # Importer le certificat dans le store Windows
          $password = ConvertTo-SecureString -String "${{ secrets.CODESIGN_PFX_PASSWORD }}" -Force -AsPlainText
          Import-PfxCertificate -FilePath $pfxPath -CertStoreLocation Cert:\CurrentUser\My -Password $password
          
          Write-Host "‚úÖ Certificat import√© dans le store Windows"

      # üîè Signature de l'ex√©cutable Windows
      - name: üîè Signer l'ex√©cutable Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # R√©cup√©rer le thumbprint du certificat
          $cert = Get-ChildItem Cert:\CurrentUser\My | Where-Object { $_.Subject -match "CN=" } | Select-Object -First 1
          
          if (-not $cert) {
            Write-Error "‚ùå Aucun certificat trouv√© dans le store"
            exit 1
          }
          
          Write-Host "‚úÖ Certificat trouv√© : $($cert.Subject)"
          Write-Host "   Thumbprint: $($cert.Thumbprint)"

          # Chercher signtool.exe
          $signtool = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\" -Recurse -Filter signtool.exe |
            Where-Object { $_.FullName -match "\\x64\\" } |
            Select-Object -First 1 -ExpandProperty FullName

          if (-not $signtool) {
            Write-Host "‚ö†Ô∏è signtool.exe (x64) non trouv√©, tentative de fallback..."
            $signtool = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\" -Recurse -Filter signtool.exe |
              Select-Object -First 1 -ExpandProperty FullName
          }

          if (-not $signtool) {
            Write-Error "‚ùå signtool.exe non trouv√©"
            exit 1
          }

          Write-Host "‚úÖ signtool utilis√© : $signtool"

          # Signature avec le certificat du store (via thumbprint)
          & "$signtool" sign /sha1 $cert.Thumbprint `
            /tr http://timestamp.digicert.com /td sha256 /fd sha256 `
            "dist\lancer_gestiolittle.exe"

          if ($LASTEXITCODE -ne 0) {
            Write-Error "‚ùå Erreur lors de la signature"
            exit $LASTEXITCODE
          }

          Write-Host "‚úÖ Signature termin√©e avec succ√®s"

      # üì§ Cr√©ation de la release GitHub
      - name: üì§ Upload de l'ex√©cutable pour la Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: "Gestion Financi√®re Little v${{ github.run_number }}"
          body: |
            üöÄ Nouvelle version g√©n√©r√©e automatiquement.

            ‚úÖ Compatible Windows, Linux et macOS.
            üîè L'ex√©cutable Windows est sign√© num√©riquement.
          files: |
            dist/lancer_gestiolittle*
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
