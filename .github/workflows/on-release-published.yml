name: üìù Mettre √† jour CHANGELOG apr√®s publication

permissions:
  contents: write

on:
  release:
    types: [published]  # Se d√©clenche quand vous publiez une draft

jobs:
  update-changelog:
    name: Mettre √† jour le CHANGELOG
    runs-on: ubuntu-latest
    
    steps:
      - name: üß∞ Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üìù Extraire les informations de la release
        id: release
        run: |
          # R√©cup√©rer les informations via l'API GitHub
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          RELEASE_NAME="${{ github.event.release.name }}"
          RELEASE_BODY="${{ github.event.release.body }}"
          RELEASE_DATE="${{ github.event.release.published_at }}"
          
          echo "tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "date=$RELEASE_DATE" >> $GITHUB_OUTPUT
          
          # Sauvegarder le body dans un fichier temporaire
          echo "$RELEASE_BODY" > /tmp/release_body.md
          
          echo "‚úÖ Release d√©tect√©e : $RELEASE_TAG"

      - name: üìÑ Cr√©er ou mettre √† jour CHANGELOG.md
        run: |
          RELEASE_TAG="${{ steps.release.outputs.tag }}"
          RELEASE_NAME="${{ steps.release.outputs.name }}"
          RELEASE_DATE="${{ steps.release.outputs.date }}"
          
          # Formater la date (YYYY-MM-DD)
          FORMATTED_DATE=$(date -d "$RELEASE_DATE" +"%d/%m/%Y" 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%SZ" "$RELEASE_DATE" +"%d/%m/%Y")
          
          # Cr√©er le fichier CHANGELOG.md s'il n'existe pas
          if [ ! -f CHANGELOG.md ]; then
            cat > CHANGELOG.md << 'EOF'
          # üìã Historique des versions
          
          Toutes les modifications notables de ce projet seront document√©es dans ce fichier.
          
          ---
          
          EOF
            echo "‚úÖ CHANGELOG.md cr√©√©"
          fi
          
          # Lire le contenu de la release
          RELEASE_BODY=$(cat /tmp/release_body.md)
          
          # Cr√©er l'entr√©e pour cette version
          NEW_ENTRY=$(cat << EOF
          
          ## [$RELEASE_TAG] - $FORMATTED_DATE
          
          $RELEASE_BODY
          
          [Voir la release compl√®te sur GitHub](https://github.com/${{ github.repository }}/releases/tag/$RELEASE_TAG)
          
          ---
          
          EOF
          )
          
          # Ins√©rer la nouvelle entr√©e au d√©but du changelog (apr√®s l'en-t√™te)
          # On garde les 4 premi√®res lignes (titre + description) et on ins√®re apr√®s
          {
            head -n 4 CHANGELOG.md
            echo "$NEW_ENTRY"
            tail -n +5 CHANGELOG.md
          } > CHANGELOG_temp.md
          
          mv CHANGELOG_temp.md CHANGELOG.md
          
          echo "‚úÖ CHANGELOG.md mis √† jour avec $RELEASE_TAG"

      - name: üìä Cr√©er un r√©sum√© JSON pour l'application
        run: |
          RELEASE_TAG="${{ steps.release.outputs.tag }}"
          RELEASE_DATE="${{ steps.release.outputs.date }}"
          FORMATTED_DATE=$(date -d "$RELEASE_DATE" +"%Y-%m-%d" 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%SZ" "$RELEASE_DATE" +"%Y-%m-%d")
          
          # Cr√©er le dossier .app_data s'il n'existe pas
          mkdir -p .app_data
          
          # Lire le body de la release
          RELEASE_BODY=$(cat /tmp/release_body.md)
          
          # Cr√©er/Mettre √† jour le fichier releases.json
          if [ ! -f .app_data/releases.json ]; then
            echo '{"releases": []}' > .app_data/releases.json
          fi
          
          # Ajouter cette release au JSON (en premi√®re position)
          python3 << 'PYTHON_SCRIPT'
          import json
          import sys
          
          # Charger le JSON existant
          with open('.app_data/releases.json', 'r') as f:
              data = json.load(f)
          
          # Lire le body de la release
          with open('/tmp/release_body.md', 'r') as f:
              release_body = f.read()
          
          # Cr√©er la nouvelle entr√©e
          new_release = {
              "version": "${{ steps.release.outputs.tag }}",
              "date": "$FORMATTED_DATE",
              "name": "${{ steps.release.outputs.name }}",
              "body": release_body,
              "url": "https://github.com/${{ github.repository }}/releases/tag/${{ steps.release.outputs.tag }}"
          }
          
          # Ajouter en premi√®re position (ou remplacer si existe d√©j√†)
          releases = data.get('releases', [])
          
          # Supprimer l'ancienne entr√©e si elle existe
          releases = [r for r in releases if r.get('version') != new_release['version']]
          
          # Ajouter la nouvelle en premier
          releases.insert(0, new_release)
          
          # Garder seulement les 10 derni√®res releases
          releases = releases[:10]
          
          data['releases'] = releases
          
          # Sauvegarder
          with open('.app_data/releases.json', 'w') as f:
              json.dump(data, f, indent=2, ensure_ascii=False)
          
          print("‚úÖ releases.json mis √† jour")
          PYTHON_SCRIPT
          
          # Rendre le script Python ex√©cutable en rempla√ßant les variables
          sed -i "s/\${{ steps.release.outputs.tag }}/$RELEASE_TAG/g" << 'EOF'
          echo "Script trait√©"
          EOF

      - name: üé® G√©n√©rer des statistiques
        run: |
          RELEASE_TAG="${{ steps.release.outputs.tag }}"
          
          # Compter les diff√©rents types de changements
          RELEASE_BODY=$(cat /tmp/release_body.md)
          
          NOUVEAUTES=$(echo "$RELEASE_BODY" | grep -c "üéâ\|‚ú®\|feat" || echo "0")
          CORRECTIONS=$(echo "$RELEASE_BODY" | grep -c "üêõ\|fix" || echo "0")
          AMELIORATIONS=$(echo "$RELEASE_BODY" | grep -c "‚ö°\|perf" || echo "0")
          
          cat > .app_data/stats_${RELEASE_TAG}.json << EOF
          {
            "version": "$RELEASE_TAG",
            "nouveautes": $NOUVEAUTES,
            "corrections": $CORRECTIONS,
            "ameliorations": $AMELIORATIONS
          }
          EOF
          
          echo "‚úÖ Statistiques g√©n√©r√©es"

      - name: üíæ Commit et push des changements
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add CHANGELOG.md .app_data/
          
          # V√©rifier s'il y a des changements
          if git diff --staged --quiet; then
            echo "Aucun changement √† commiter"
          else
            git commit -m "docs: mise √† jour CHANGELOG pour ${{ steps.release.outputs.tag }} [skip ci]"
            git push
            echo "‚úÖ CHANGELOG.md et releases.json mis √† jour et push√©s"
          fi

      - name: üéâ Notification de succ√®s
        if: success()
        run: |
          echo "=================================="
          echo "‚úÖ CHANGELOG MIS √Ä JOUR !"
          echo "=================================="
          echo ""
          echo "üì¶ Version : ${{ steps.release.outputs.tag }}"
          echo "üìÖ Date : ${{ steps.release.outputs.date }}"
          echo ""
          echo "üìÑ Fichiers mis √† jour :"
          echo "  - CHANGELOG.md"
          echo "  - .app_data/releases.json"
          echo ""
          echo "üéØ Les utilisateurs verront ces changements"
          echo "    dans l'onglet 'Mises √† jour' de l'application"
          echo ""
          echo "=================================="
